// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.21.12
// source: Order.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Order struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// order ids
	ClientId *int32 `protobuf:"varint,1,opt,name=clientId,proto3,oneof" json:"clientId,omitempty"`
	OrderId  *int32 `protobuf:"varint,2,opt,name=orderId,proto3,oneof" json:"orderId,omitempty"`
	PermId   *int64 `protobuf:"varint,3,opt,name=permId,proto3,oneof" json:"permId,omitempty"`
	ParentId *int32 `protobuf:"varint,4,opt,name=parentId,proto3,oneof" json:"parentId,omitempty"`
	// primary attributes
	Action        *string  `protobuf:"bytes,5,opt,name=action,proto3,oneof" json:"action,omitempty"`
	TotalQuantity *string  `protobuf:"bytes,6,opt,name=totalQuantity,proto3,oneof" json:"totalQuantity,omitempty"`
	DisplaySize   *int32   `protobuf:"varint,7,opt,name=displaySize,proto3,oneof" json:"displaySize,omitempty"`
	OrderType     *string  `protobuf:"bytes,8,opt,name=orderType,proto3,oneof" json:"orderType,omitempty"`
	LmtPrice      *float64 `protobuf:"fixed64,9,opt,name=lmtPrice,proto3,oneof" json:"lmtPrice,omitempty"`
	AuxPrice      *float64 `protobuf:"fixed64,10,opt,name=auxPrice,proto3,oneof" json:"auxPrice,omitempty"`
	Tif           *string  `protobuf:"bytes,11,opt,name=tif,proto3,oneof" json:"tif,omitempty"`
	// clearing info
	Account         *string `protobuf:"bytes,12,opt,name=account,proto3,oneof" json:"account,omitempty"`
	SettlingFirm    *string `protobuf:"bytes,13,opt,name=settlingFirm,proto3,oneof" json:"settlingFirm,omitempty"`
	ClearingAccount *string `protobuf:"bytes,14,opt,name=clearingAccount,proto3,oneof" json:"clearingAccount,omitempty"`
	ClearingIntent  *string `protobuf:"bytes,15,opt,name=clearingIntent,proto3,oneof" json:"clearingIntent,omitempty"`
	// secondary attributes
	AllOrNone       *bool    `protobuf:"varint,16,opt,name=allOrNone,proto3,oneof" json:"allOrNone,omitempty"`
	BlockOrder      *bool    `protobuf:"varint,17,opt,name=blockOrder,proto3,oneof" json:"blockOrder,omitempty"`
	Hidden          *bool    `protobuf:"varint,18,opt,name=hidden,proto3,oneof" json:"hidden,omitempty"`
	OutsideRth      *bool    `protobuf:"varint,19,opt,name=outsideRth,proto3,oneof" json:"outsideRth,omitempty"`
	SweepToFill     *bool    `protobuf:"varint,20,opt,name=sweepToFill,proto3,oneof" json:"sweepToFill,omitempty"`
	PercentOffset   *float64 `protobuf:"fixed64,21,opt,name=percentOffset,proto3,oneof" json:"percentOffset,omitempty"`
	TrailingPercent *float64 `protobuf:"fixed64,22,opt,name=trailingPercent,proto3,oneof" json:"trailingPercent,omitempty"`
	TrailStopPrice  *float64 `protobuf:"fixed64,23,opt,name=trailStopPrice,proto3,oneof" json:"trailStopPrice,omitempty"`
	MinQty          *int32   `protobuf:"varint,24,opt,name=minQty,proto3,oneof" json:"minQty,omitempty"`
	GoodAfterTime   *string  `protobuf:"bytes,25,opt,name=goodAfterTime,proto3,oneof" json:"goodAfterTime,omitempty"`
	GoodTillDate    *string  `protobuf:"bytes,26,opt,name=goodTillDate,proto3,oneof" json:"goodTillDate,omitempty"`
	OcaGroup        *string  `protobuf:"bytes,27,opt,name=ocaGroup,proto3,oneof" json:"ocaGroup,omitempty"`
	OrderRef        *string  `protobuf:"bytes,28,opt,name=orderRef,proto3,oneof" json:"orderRef,omitempty"`
	Rule80A         *string  `protobuf:"bytes,29,opt,name=rule80A,proto3,oneof" json:"rule80A,omitempty"`
	OcaType         *int32   `protobuf:"varint,30,opt,name=ocaType,proto3,oneof" json:"ocaType,omitempty"`
	TriggerMethod   *int32   `protobuf:"varint,31,opt,name=triggerMethod,proto3,oneof" json:"triggerMethod,omitempty"`
	// extended order fields
	ActiveStartTime *string `protobuf:"bytes,32,opt,name=activeStartTime,proto3,oneof" json:"activeStartTime,omitempty"`
	ActiveStopTime  *string `protobuf:"bytes,33,opt,name=activeStopTime,proto3,oneof" json:"activeStopTime,omitempty"`
	// advisor allocation orders
	FaGroup      *string `protobuf:"bytes,34,opt,name=faGroup,proto3,oneof" json:"faGroup,omitempty"`
	FaMethod     *string `protobuf:"bytes,35,opt,name=faMethod,proto3,oneof" json:"faMethod,omitempty"`
	FaPercentage *string `protobuf:"bytes,36,opt,name=faPercentage,proto3,oneof" json:"faPercentage,omitempty"`
	// volatility orders
	Volatility                     *float64 `protobuf:"fixed64,37,opt,name=volatility,proto3,oneof" json:"volatility,omitempty"`
	VolatilityType                 *int32   `protobuf:"varint,38,opt,name=volatilityType,proto3,oneof" json:"volatilityType,omitempty"`
	ContinuousUpdate               *bool    `protobuf:"varint,39,opt,name=continuousUpdate,proto3,oneof" json:"continuousUpdate,omitempty"`
	ReferencePriceType             *int32   `protobuf:"varint,40,opt,name=referencePriceType,proto3,oneof" json:"referencePriceType,omitempty"`
	DeltaNeutralOrderType          *string  `protobuf:"bytes,41,opt,name=deltaNeutralOrderType,proto3,oneof" json:"deltaNeutralOrderType,omitempty"`
	DeltaNeutralAuxPrice           *float64 `protobuf:"fixed64,42,opt,name=deltaNeutralAuxPrice,proto3,oneof" json:"deltaNeutralAuxPrice,omitempty"`
	DeltaNeutralConId              *int32   `protobuf:"varint,43,opt,name=deltaNeutralConId,proto3,oneof" json:"deltaNeutralConId,omitempty"`
	DeltaNeutralOpenClose          *string  `protobuf:"bytes,44,opt,name=deltaNeutralOpenClose,proto3,oneof" json:"deltaNeutralOpenClose,omitempty"`
	DeltaNeutralShortSale          *bool    `protobuf:"varint,45,opt,name=deltaNeutralShortSale,proto3,oneof" json:"deltaNeutralShortSale,omitempty"`
	DeltaNeutralShortSaleSlot      *int32   `protobuf:"varint,46,opt,name=deltaNeutralShortSaleSlot,proto3,oneof" json:"deltaNeutralShortSaleSlot,omitempty"`
	DeltaNeutralDesignatedLocation *string  `protobuf:"bytes,47,opt,name=deltaNeutralDesignatedLocation,proto3,oneof" json:"deltaNeutralDesignatedLocation,omitempty"`
	// scale orders
	ScaleInitLevelSize       *int32   `protobuf:"varint,48,opt,name=scaleInitLevelSize,proto3,oneof" json:"scaleInitLevelSize,omitempty"`
	ScaleSubsLevelSize       *int32   `protobuf:"varint,49,opt,name=scaleSubsLevelSize,proto3,oneof" json:"scaleSubsLevelSize,omitempty"`
	ScalePriceIncrement      *float64 `protobuf:"fixed64,50,opt,name=scalePriceIncrement,proto3,oneof" json:"scalePriceIncrement,omitempty"`
	ScalePriceAdjustValue    *float64 `protobuf:"fixed64,51,opt,name=scalePriceAdjustValue,proto3,oneof" json:"scalePriceAdjustValue,omitempty"`
	ScalePriceAdjustInterval *int32   `protobuf:"varint,52,opt,name=scalePriceAdjustInterval,proto3,oneof" json:"scalePriceAdjustInterval,omitempty"`
	ScaleProfitOffset        *float64 `protobuf:"fixed64,53,opt,name=scaleProfitOffset,proto3,oneof" json:"scaleProfitOffset,omitempty"`
	ScaleAutoReset           *bool    `protobuf:"varint,54,opt,name=scaleAutoReset,proto3,oneof" json:"scaleAutoReset,omitempty"`
	ScaleInitPosition        *int32   `protobuf:"varint,55,opt,name=scaleInitPosition,proto3,oneof" json:"scaleInitPosition,omitempty"`
	ScaleInitFillQty         *int32   `protobuf:"varint,56,opt,name=scaleInitFillQty,proto3,oneof" json:"scaleInitFillQty,omitempty"`
	ScaleRandomPercent       *bool    `protobuf:"varint,57,opt,name=scaleRandomPercent,proto3,oneof" json:"scaleRandomPercent,omitempty"`
	ScaleTable               *string  `protobuf:"bytes,58,opt,name=scaleTable,proto3,oneof" json:"scaleTable,omitempty"`
	// hedge orders
	HedgeType  *string `protobuf:"bytes,59,opt,name=hedgeType,proto3,oneof" json:"hedgeType,omitempty"`
	HedgeParam *string `protobuf:"bytes,60,opt,name=hedgeParam,proto3,oneof" json:"hedgeParam,omitempty"`
	// algo orders
	AlgoStrategy *string           `protobuf:"bytes,61,opt,name=algoStrategy,proto3,oneof" json:"algoStrategy,omitempty"`
	AlgoParams   map[string]string `protobuf:"bytes,62,rep,name=algoParams,proto3" json:"algoParams,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AlgoId       *string           `protobuf:"bytes,63,opt,name=algoId,proto3,oneof" json:"algoId,omitempty"`
	// combo orders
	SmartComboRoutingParams map[string]string `protobuf:"bytes,64,rep,name=smartComboRoutingParams,proto3" json:"smartComboRoutingParams,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// processing control
	WhatIf                        *bool `protobuf:"varint,65,opt,name=whatIf,proto3,oneof" json:"whatIf,omitempty"`
	Transmit                      *bool `protobuf:"varint,66,opt,name=transmit,proto3,oneof" json:"transmit,omitempty"`
	OverridePercentageConstraints *bool `protobuf:"varint,67,opt,name=overridePercentageConstraints,proto3,oneof" json:"overridePercentageConstraints,omitempty"`
	// Institutional orders only
	OpenClose                   *string `protobuf:"bytes,68,opt,name=openClose,proto3,oneof" json:"openClose,omitempty"`
	Origin                      *int32  `protobuf:"varint,69,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
	ShortSaleSlot               *int32  `protobuf:"varint,70,opt,name=shortSaleSlot,proto3,oneof" json:"shortSaleSlot,omitempty"`
	DesignatedLocation          *string `protobuf:"bytes,71,opt,name=designatedLocation,proto3,oneof" json:"designatedLocation,omitempty"`
	ExemptCode                  *int32  `protobuf:"varint,72,opt,name=exemptCode,proto3,oneof" json:"exemptCode,omitempty"`
	DeltaNeutralSettlingFirm    *string `protobuf:"bytes,73,opt,name=deltaNeutralSettlingFirm,proto3,oneof" json:"deltaNeutralSettlingFirm,omitempty"`
	DeltaNeutralClearingAccount *string `protobuf:"bytes,74,opt,name=deltaNeutralClearingAccount,proto3,oneof" json:"deltaNeutralClearingAccount,omitempty"`
	DeltaNeutralClearingIntent  *string `protobuf:"bytes,75,opt,name=deltaNeutralClearingIntent,proto3,oneof" json:"deltaNeutralClearingIntent,omitempty"`
	// SMART routing only
	DiscretionaryAmt   *float64 `protobuf:"fixed64,76,opt,name=discretionaryAmt,proto3,oneof" json:"discretionaryAmt,omitempty"`
	OptOutSmartRouting *bool    `protobuf:"varint,77,opt,name=optOutSmartRouting,proto3,oneof" json:"optOutSmartRouting,omitempty"`
	// BOX ORDERS ONLY
	StartingPrice *float64 `protobuf:"fixed64,78,opt,name=startingPrice,proto3,oneof" json:"startingPrice,omitempty"`
	StockRefPrice *float64 `protobuf:"fixed64,79,opt,name=stockRefPrice,proto3,oneof" json:"stockRefPrice,omitempty"`
	Delta         *float64 `protobuf:"fixed64,80,opt,name=delta,proto3,oneof" json:"delta,omitempty"`
	// pegged to stock or VOL orders
	StockRangeLower *float64 `protobuf:"fixed64,81,opt,name=stockRangeLower,proto3,oneof" json:"stockRangeLower,omitempty"`
	StockRangeUpper *float64 `protobuf:"fixed64,82,opt,name=stockRangeUpper,proto3,oneof" json:"stockRangeUpper,omitempty"`
	// Not Held
	NotHeld *bool `protobuf:"varint,83,opt,name=notHeld,proto3,oneof" json:"notHeld,omitempty"`
	// order misc options
	OrderMiscOptions map[string]string `protobuf:"bytes,84,rep,name=orderMiscOptions,proto3" json:"orderMiscOptions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// order algo id
	Solicited      *bool `protobuf:"varint,85,opt,name=solicited,proto3,oneof" json:"solicited,omitempty"`
	RandomizeSize  *bool `protobuf:"varint,86,opt,name=randomizeSize,proto3,oneof" json:"randomizeSize,omitempty"`
	RandomizePrice *bool `protobuf:"varint,87,opt,name=randomizePrice,proto3,oneof" json:"randomizePrice,omitempty"`
	// PEG2BENCH fields
	ReferenceContractId          *int32            `protobuf:"varint,88,opt,name=referenceContractId,proto3,oneof" json:"referenceContractId,omitempty"`
	PeggedChangeAmount           *float64          `protobuf:"fixed64,89,opt,name=peggedChangeAmount,proto3,oneof" json:"peggedChangeAmount,omitempty"`
	IsPeggedChangeAmountDecrease *bool             `protobuf:"varint,90,opt,name=isPeggedChangeAmountDecrease,proto3,oneof" json:"isPeggedChangeAmountDecrease,omitempty"`
	ReferenceChangeAmount        *float64          `protobuf:"fixed64,91,opt,name=referenceChangeAmount,proto3,oneof" json:"referenceChangeAmount,omitempty"`
	ReferenceExchangeId          *string           `protobuf:"bytes,92,opt,name=referenceExchangeId,proto3,oneof" json:"referenceExchangeId,omitempty"`
	AdjustedOrderType            *string           `protobuf:"bytes,93,opt,name=adjustedOrderType,proto3,oneof" json:"adjustedOrderType,omitempty"`
	TriggerPrice                 *float64          `protobuf:"fixed64,94,opt,name=triggerPrice,proto3,oneof" json:"triggerPrice,omitempty"`
	AdjustedStopPrice            *float64          `protobuf:"fixed64,95,opt,name=adjustedStopPrice,proto3,oneof" json:"adjustedStopPrice,omitempty"`
	AdjustedStopLimitPrice       *float64          `protobuf:"fixed64,96,opt,name=adjustedStopLimitPrice,proto3,oneof" json:"adjustedStopLimitPrice,omitempty"`
	AdjustedTrailingAmount       *float64          `protobuf:"fixed64,97,opt,name=adjustedTrailingAmount,proto3,oneof" json:"adjustedTrailingAmount,omitempty"`
	AdjustableTrailingUnit       *int32            `protobuf:"varint,98,opt,name=adjustableTrailingUnit,proto3,oneof" json:"adjustableTrailingUnit,omitempty"`
	LmtPriceOffset               *float64          `protobuf:"fixed64,99,opt,name=lmtPriceOffset,proto3,oneof" json:"lmtPriceOffset,omitempty"`
	Conditions                   []*OrderCondition `protobuf:"bytes,100,rep,name=conditions,proto3" json:"conditions,omitempty"`
	ConditionsCancelOrder        *bool             `protobuf:"varint,101,opt,name=conditionsCancelOrder,proto3,oneof" json:"conditionsCancelOrder,omitempty"`
	ConditionsIgnoreRth          *bool             `protobuf:"varint,102,opt,name=conditionsIgnoreRth,proto3,oneof" json:"conditionsIgnoreRth,omitempty"`
	// models
	ModelCode      *string         `protobuf:"bytes,103,opt,name=modelCode,proto3,oneof" json:"modelCode,omitempty"`
	ExtOperator    *string         `protobuf:"bytes,104,opt,name=extOperator,proto3,oneof" json:"extOperator,omitempty"`
	SoftDollarTier *SoftDollarTier `protobuf:"bytes,105,opt,name=softDollarTier,proto3,oneof" json:"softDollarTier,omitempty"`
	// native cash quantity
	CashQty               *float64 `protobuf:"fixed64,106,opt,name=cashQty,proto3,oneof" json:"cashQty,omitempty"`
	Mifid2DecisionMaker   *string  `protobuf:"bytes,107,opt,name=mifid2DecisionMaker,proto3,oneof" json:"mifid2DecisionMaker,omitempty"`
	Mifid2DecisionAlgo    *string  `protobuf:"bytes,108,opt,name=mifid2DecisionAlgo,proto3,oneof" json:"mifid2DecisionAlgo,omitempty"`
	Mifid2ExecutionTrader *string  `protobuf:"bytes,109,opt,name=mifid2ExecutionTrader,proto3,oneof" json:"mifid2ExecutionTrader,omitempty"`
	Mifid2ExecutionAlgo   *string  `protobuf:"bytes,110,opt,name=mifid2ExecutionAlgo,proto3,oneof" json:"mifid2ExecutionAlgo,omitempty"`
	// don't use auto price for hedge
	DontUseAutoPriceForHedge    *bool    `protobuf:"varint,111,opt,name=dontUseAutoPriceForHedge,proto3,oneof" json:"dontUseAutoPriceForHedge,omitempty"`
	IsOmsContainer              *bool    `protobuf:"varint,112,opt,name=isOmsContainer,proto3,oneof" json:"isOmsContainer,omitempty"`
	DiscretionaryUpToLimitPrice *bool    `protobuf:"varint,113,opt,name=discretionaryUpToLimitPrice,proto3,oneof" json:"discretionaryUpToLimitPrice,omitempty"`
	AutoCancelDate              *string  `protobuf:"bytes,114,opt,name=autoCancelDate,proto3,oneof" json:"autoCancelDate,omitempty"`
	FilledQuantity              *string  `protobuf:"bytes,115,opt,name=filledQuantity,proto3,oneof" json:"filledQuantity,omitempty"`
	RefFuturesConId             *int32   `protobuf:"varint,116,opt,name=refFuturesConId,proto3,oneof" json:"refFuturesConId,omitempty"`
	AutoCancelParent            *bool    `protobuf:"varint,117,opt,name=autoCancelParent,proto3,oneof" json:"autoCancelParent,omitempty"`
	Shareholder                 *string  `protobuf:"bytes,118,opt,name=shareholder,proto3,oneof" json:"shareholder,omitempty"`
	ImbalanceOnly               *bool    `protobuf:"varint,119,opt,name=imbalanceOnly,proto3,oneof" json:"imbalanceOnly,omitempty"`
	RouteMarketableToBbo        *bool    `protobuf:"varint,120,opt,name=routeMarketableToBbo,proto3,oneof" json:"routeMarketableToBbo,omitempty"`
	ParentPermId                *int64   `protobuf:"varint,121,opt,name=parentPermId,proto3,oneof" json:"parentPermId,omitempty"`
	UsePriceMgmtAlgo            *int32   `protobuf:"varint,122,opt,name=usePriceMgmtAlgo,proto3,oneof" json:"usePriceMgmtAlgo,omitempty"`
	Duration                    *int32   `protobuf:"varint,123,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	PostToAts                   *int32   `protobuf:"varint,124,opt,name=postToAts,proto3,oneof" json:"postToAts,omitempty"`
	AdvancedErrorOverride       *string  `protobuf:"bytes,125,opt,name=advancedErrorOverride,proto3,oneof" json:"advancedErrorOverride,omitempty"`
	ManualOrderTime             *string  `protobuf:"bytes,126,opt,name=manualOrderTime,proto3,oneof" json:"manualOrderTime,omitempty"`
	MinTradeQty                 *int32   `protobuf:"varint,127,opt,name=minTradeQty,proto3,oneof" json:"minTradeQty,omitempty"`
	MinCompeteSize              *int32   `protobuf:"varint,128,opt,name=minCompeteSize,proto3,oneof" json:"minCompeteSize,omitempty"`
	CompeteAgainstBestOffset    *float64 `protobuf:"fixed64,129,opt,name=competeAgainstBestOffset,proto3,oneof" json:"competeAgainstBestOffset,omitempty"`
	MidOffsetAtWhole            *float64 `protobuf:"fixed64,130,opt,name=midOffsetAtWhole,proto3,oneof" json:"midOffsetAtWhole,omitempty"`
	MidOffsetAtHalf             *float64 `protobuf:"fixed64,131,opt,name=midOffsetAtHalf,proto3,oneof" json:"midOffsetAtHalf,omitempty"`
	CustomerAccount             *string  `protobuf:"bytes,132,opt,name=customerAccount,proto3,oneof" json:"customerAccount,omitempty"`
	ProfessionalCustomer        *bool    `protobuf:"varint,133,opt,name=professionalCustomer,proto3,oneof" json:"professionalCustomer,omitempty"`
	BondAccruedInterest         *string  `protobuf:"bytes,134,opt,name=bondAccruedInterest,proto3,oneof" json:"bondAccruedInterest,omitempty"`
	IncludeOvernight            *bool    `protobuf:"varint,135,opt,name=includeOvernight,proto3,oneof" json:"includeOvernight,omitempty"`
	ManualOrderIndicator        *int32   `protobuf:"varint,136,opt,name=manualOrderIndicator,proto3,oneof" json:"manualOrderIndicator,omitempty"`
	Submitter                   *string  `protobuf:"bytes,137,opt,name=submitter,proto3,oneof" json:"submitter,omitempty"`
	Deactivate                  *bool    `protobuf:"varint,138,opt,name=deactivate,proto3,oneof" json:"deactivate,omitempty"`
	PostOnly                    *bool    `protobuf:"varint,139,opt,name=postOnly,proto3,oneof" json:"postOnly,omitempty"`
	AllowPreOpen                *bool    `protobuf:"varint,140,opt,name=allowPreOpen,proto3,oneof" json:"allowPreOpen,omitempty"`
	IgnoreOpenAuction           *bool    `protobuf:"varint,141,opt,name=ignoreOpenAuction,proto3,oneof" json:"ignoreOpenAuction,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Order) Reset() {
	*x = Order{}
	mi := &file_Order_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_Order_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_Order_proto_rawDescGZIP(), []int{0}
}

func (x *Order) GetClientId() int32 {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return 0
}

func (x *Order) GetOrderId() int32 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *Order) GetPermId() int64 {
	if x != nil && x.PermId != nil {
		return *x.PermId
	}
	return 0
}

func (x *Order) GetParentId() int32 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *Order) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *Order) GetTotalQuantity() string {
	if x != nil && x.TotalQuantity != nil {
		return *x.TotalQuantity
	}
	return ""
}

func (x *Order) GetDisplaySize() int32 {
	if x != nil && x.DisplaySize != nil {
		return *x.DisplaySize
	}
	return 0
}

func (x *Order) GetOrderType() string {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return ""
}

func (x *Order) GetLmtPrice() float64 {
	if x != nil && x.LmtPrice != nil {
		return *x.LmtPrice
	}
	return 0
}

func (x *Order) GetAuxPrice() float64 {
	if x != nil && x.AuxPrice != nil {
		return *x.AuxPrice
	}
	return 0
}

func (x *Order) GetTif() string {
	if x != nil && x.Tif != nil {
		return *x.Tif
	}
	return ""
}

func (x *Order) GetAccount() string {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return ""
}

func (x *Order) GetSettlingFirm() string {
	if x != nil && x.SettlingFirm != nil {
		return *x.SettlingFirm
	}
	return ""
}

func (x *Order) GetClearingAccount() string {
	if x != nil && x.ClearingAccount != nil {
		return *x.ClearingAccount
	}
	return ""
}

func (x *Order) GetClearingIntent() string {
	if x != nil && x.ClearingIntent != nil {
		return *x.ClearingIntent
	}
	return ""
}

func (x *Order) GetAllOrNone() bool {
	if x != nil && x.AllOrNone != nil {
		return *x.AllOrNone
	}
	return false
}

func (x *Order) GetBlockOrder() bool {
	if x != nil && x.BlockOrder != nil {
		return *x.BlockOrder
	}
	return false
}

func (x *Order) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *Order) GetOutsideRth() bool {
	if x != nil && x.OutsideRth != nil {
		return *x.OutsideRth
	}
	return false
}

func (x *Order) GetSweepToFill() bool {
	if x != nil && x.SweepToFill != nil {
		return *x.SweepToFill
	}
	return false
}

func (x *Order) GetPercentOffset() float64 {
	if x != nil && x.PercentOffset != nil {
		return *x.PercentOffset
	}
	return 0
}

func (x *Order) GetTrailingPercent() float64 {
	if x != nil && x.TrailingPercent != nil {
		return *x.TrailingPercent
	}
	return 0
}

func (x *Order) GetTrailStopPrice() float64 {
	if x != nil && x.TrailStopPrice != nil {
		return *x.TrailStopPrice
	}
	return 0
}

func (x *Order) GetMinQty() int32 {
	if x != nil && x.MinQty != nil {
		return *x.MinQty
	}
	return 0
}

func (x *Order) GetGoodAfterTime() string {
	if x != nil && x.GoodAfterTime != nil {
		return *x.GoodAfterTime
	}
	return ""
}

func (x *Order) GetGoodTillDate() string {
	if x != nil && x.GoodTillDate != nil {
		return *x.GoodTillDate
	}
	return ""
}

func (x *Order) GetOcaGroup() string {
	if x != nil && x.OcaGroup != nil {
		return *x.OcaGroup
	}
	return ""
}

func (x *Order) GetOrderRef() string {
	if x != nil && x.OrderRef != nil {
		return *x.OrderRef
	}
	return ""
}

func (x *Order) GetRule80A() string {
	if x != nil && x.Rule80A != nil {
		return *x.Rule80A
	}
	return ""
}

func (x *Order) GetOcaType() int32 {
	if x != nil && x.OcaType != nil {
		return *x.OcaType
	}
	return 0
}

func (x *Order) GetTriggerMethod() int32 {
	if x != nil && x.TriggerMethod != nil {
		return *x.TriggerMethod
	}
	return 0
}

func (x *Order) GetActiveStartTime() string {
	if x != nil && x.ActiveStartTime != nil {
		return *x.ActiveStartTime
	}
	return ""
}

func (x *Order) GetActiveStopTime() string {
	if x != nil && x.ActiveStopTime != nil {
		return *x.ActiveStopTime
	}
	return ""
}

func (x *Order) GetFaGroup() string {
	if x != nil && x.FaGroup != nil {
		return *x.FaGroup
	}
	return ""
}

func (x *Order) GetFaMethod() string {
	if x != nil && x.FaMethod != nil {
		return *x.FaMethod
	}
	return ""
}

func (x *Order) GetFaPercentage() string {
	if x != nil && x.FaPercentage != nil {
		return *x.FaPercentage
	}
	return ""
}

func (x *Order) GetVolatility() float64 {
	if x != nil && x.Volatility != nil {
		return *x.Volatility
	}
	return 0
}

func (x *Order) GetVolatilityType() int32 {
	if x != nil && x.VolatilityType != nil {
		return *x.VolatilityType
	}
	return 0
}

func (x *Order) GetContinuousUpdate() bool {
	if x != nil && x.ContinuousUpdate != nil {
		return *x.ContinuousUpdate
	}
	return false
}

func (x *Order) GetReferencePriceType() int32 {
	if x != nil && x.ReferencePriceType != nil {
		return *x.ReferencePriceType
	}
	return 0
}

func (x *Order) GetDeltaNeutralOrderType() string {
	if x != nil && x.DeltaNeutralOrderType != nil {
		return *x.DeltaNeutralOrderType
	}
	return ""
}

func (x *Order) GetDeltaNeutralAuxPrice() float64 {
	if x != nil && x.DeltaNeutralAuxPrice != nil {
		return *x.DeltaNeutralAuxPrice
	}
	return 0
}

func (x *Order) GetDeltaNeutralConId() int32 {
	if x != nil && x.DeltaNeutralConId != nil {
		return *x.DeltaNeutralConId
	}
	return 0
}

func (x *Order) GetDeltaNeutralOpenClose() string {
	if x != nil && x.DeltaNeutralOpenClose != nil {
		return *x.DeltaNeutralOpenClose
	}
	return ""
}

func (x *Order) GetDeltaNeutralShortSale() bool {
	if x != nil && x.DeltaNeutralShortSale != nil {
		return *x.DeltaNeutralShortSale
	}
	return false
}

func (x *Order) GetDeltaNeutralShortSaleSlot() int32 {
	if x != nil && x.DeltaNeutralShortSaleSlot != nil {
		return *x.DeltaNeutralShortSaleSlot
	}
	return 0
}

func (x *Order) GetDeltaNeutralDesignatedLocation() string {
	if x != nil && x.DeltaNeutralDesignatedLocation != nil {
		return *x.DeltaNeutralDesignatedLocation
	}
	return ""
}

func (x *Order) GetScaleInitLevelSize() int32 {
	if x != nil && x.ScaleInitLevelSize != nil {
		return *x.ScaleInitLevelSize
	}
	return 0
}

func (x *Order) GetScaleSubsLevelSize() int32 {
	if x != nil && x.ScaleSubsLevelSize != nil {
		return *x.ScaleSubsLevelSize
	}
	return 0
}

func (x *Order) GetScalePriceIncrement() float64 {
	if x != nil && x.ScalePriceIncrement != nil {
		return *x.ScalePriceIncrement
	}
	return 0
}

func (x *Order) GetScalePriceAdjustValue() float64 {
	if x != nil && x.ScalePriceAdjustValue != nil {
		return *x.ScalePriceAdjustValue
	}
	return 0
}

func (x *Order) GetScalePriceAdjustInterval() int32 {
	if x != nil && x.ScalePriceAdjustInterval != nil {
		return *x.ScalePriceAdjustInterval
	}
	return 0
}

func (x *Order) GetScaleProfitOffset() float64 {
	if x != nil && x.ScaleProfitOffset != nil {
		return *x.ScaleProfitOffset
	}
	return 0
}

func (x *Order) GetScaleAutoReset() bool {
	if x != nil && x.ScaleAutoReset != nil {
		return *x.ScaleAutoReset
	}
	return false
}

func (x *Order) GetScaleInitPosition() int32 {
	if x != nil && x.ScaleInitPosition != nil {
		return *x.ScaleInitPosition
	}
	return 0
}

func (x *Order) GetScaleInitFillQty() int32 {
	if x != nil && x.ScaleInitFillQty != nil {
		return *x.ScaleInitFillQty
	}
	return 0
}

func (x *Order) GetScaleRandomPercent() bool {
	if x != nil && x.ScaleRandomPercent != nil {
		return *x.ScaleRandomPercent
	}
	return false
}

func (x *Order) GetScaleTable() string {
	if x != nil && x.ScaleTable != nil {
		return *x.ScaleTable
	}
	return ""
}

func (x *Order) GetHedgeType() string {
	if x != nil && x.HedgeType != nil {
		return *x.HedgeType
	}
	return ""
}

func (x *Order) GetHedgeParam() string {
	if x != nil && x.HedgeParam != nil {
		return *x.HedgeParam
	}
	return ""
}

func (x *Order) GetAlgoStrategy() string {
	if x != nil && x.AlgoStrategy != nil {
		return *x.AlgoStrategy
	}
	return ""
}

func (x *Order) GetAlgoParams() map[string]string {
	if x != nil {
		return x.AlgoParams
	}
	return nil
}

func (x *Order) GetAlgoId() string {
	if x != nil && x.AlgoId != nil {
		return *x.AlgoId
	}
	return ""
}

func (x *Order) GetSmartComboRoutingParams() map[string]string {
	if x != nil {
		return x.SmartComboRoutingParams
	}
	return nil
}

func (x *Order) GetWhatIf() bool {
	if x != nil && x.WhatIf != nil {
		return *x.WhatIf
	}
	return false
}

func (x *Order) GetTransmit() bool {
	if x != nil && x.Transmit != nil {
		return *x.Transmit
	}
	return false
}

func (x *Order) GetOverridePercentageConstraints() bool {
	if x != nil && x.OverridePercentageConstraints != nil {
		return *x.OverridePercentageConstraints
	}
	return false
}

func (x *Order) GetOpenClose() string {
	if x != nil && x.OpenClose != nil {
		return *x.OpenClose
	}
	return ""
}

func (x *Order) GetOrigin() int32 {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return 0
}

func (x *Order) GetShortSaleSlot() int32 {
	if x != nil && x.ShortSaleSlot != nil {
		return *x.ShortSaleSlot
	}
	return 0
}

func (x *Order) GetDesignatedLocation() string {
	if x != nil && x.DesignatedLocation != nil {
		return *x.DesignatedLocation
	}
	return ""
}

func (x *Order) GetExemptCode() int32 {
	if x != nil && x.ExemptCode != nil {
		return *x.ExemptCode
	}
	return 0
}

func (x *Order) GetDeltaNeutralSettlingFirm() string {
	if x != nil && x.DeltaNeutralSettlingFirm != nil {
		return *x.DeltaNeutralSettlingFirm
	}
	return ""
}

func (x *Order) GetDeltaNeutralClearingAccount() string {
	if x != nil && x.DeltaNeutralClearingAccount != nil {
		return *x.DeltaNeutralClearingAccount
	}
	return ""
}

func (x *Order) GetDeltaNeutralClearingIntent() string {
	if x != nil && x.DeltaNeutralClearingIntent != nil {
		return *x.DeltaNeutralClearingIntent
	}
	return ""
}

func (x *Order) GetDiscretionaryAmt() float64 {
	if x != nil && x.DiscretionaryAmt != nil {
		return *x.DiscretionaryAmt
	}
	return 0
}

func (x *Order) GetOptOutSmartRouting() bool {
	if x != nil && x.OptOutSmartRouting != nil {
		return *x.OptOutSmartRouting
	}
	return false
}

func (x *Order) GetStartingPrice() float64 {
	if x != nil && x.StartingPrice != nil {
		return *x.StartingPrice
	}
	return 0
}

func (x *Order) GetStockRefPrice() float64 {
	if x != nil && x.StockRefPrice != nil {
		return *x.StockRefPrice
	}
	return 0
}

func (x *Order) GetDelta() float64 {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return 0
}

func (x *Order) GetStockRangeLower() float64 {
	if x != nil && x.StockRangeLower != nil {
		return *x.StockRangeLower
	}
	return 0
}

func (x *Order) GetStockRangeUpper() float64 {
	if x != nil && x.StockRangeUpper != nil {
		return *x.StockRangeUpper
	}
	return 0
}

func (x *Order) GetNotHeld() bool {
	if x != nil && x.NotHeld != nil {
		return *x.NotHeld
	}
	return false
}

func (x *Order) GetOrderMiscOptions() map[string]string {
	if x != nil {
		return x.OrderMiscOptions
	}
	return nil
}

func (x *Order) GetSolicited() bool {
	if x != nil && x.Solicited != nil {
		return *x.Solicited
	}
	return false
}

func (x *Order) GetRandomizeSize() bool {
	if x != nil && x.RandomizeSize != nil {
		return *x.RandomizeSize
	}
	return false
}

func (x *Order) GetRandomizePrice() bool {
	if x != nil && x.RandomizePrice != nil {
		return *x.RandomizePrice
	}
	return false
}

func (x *Order) GetReferenceContractId() int32 {
	if x != nil && x.ReferenceContractId != nil {
		return *x.ReferenceContractId
	}
	return 0
}

func (x *Order) GetPeggedChangeAmount() float64 {
	if x != nil && x.PeggedChangeAmount != nil {
		return *x.PeggedChangeAmount
	}
	return 0
}

func (x *Order) GetIsPeggedChangeAmountDecrease() bool {
	if x != nil && x.IsPeggedChangeAmountDecrease != nil {
		return *x.IsPeggedChangeAmountDecrease
	}
	return false
}

func (x *Order) GetReferenceChangeAmount() float64 {
	if x != nil && x.ReferenceChangeAmount != nil {
		return *x.ReferenceChangeAmount
	}
	return 0
}

func (x *Order) GetReferenceExchangeId() string {
	if x != nil && x.ReferenceExchangeId != nil {
		return *x.ReferenceExchangeId
	}
	return ""
}

func (x *Order) GetAdjustedOrderType() string {
	if x != nil && x.AdjustedOrderType != nil {
		return *x.AdjustedOrderType
	}
	return ""
}

func (x *Order) GetTriggerPrice() float64 {
	if x != nil && x.TriggerPrice != nil {
		return *x.TriggerPrice
	}
	return 0
}

func (x *Order) GetAdjustedStopPrice() float64 {
	if x != nil && x.AdjustedStopPrice != nil {
		return *x.AdjustedStopPrice
	}
	return 0
}

func (x *Order) GetAdjustedStopLimitPrice() float64 {
	if x != nil && x.AdjustedStopLimitPrice != nil {
		return *x.AdjustedStopLimitPrice
	}
	return 0
}

func (x *Order) GetAdjustedTrailingAmount() float64 {
	if x != nil && x.AdjustedTrailingAmount != nil {
		return *x.AdjustedTrailingAmount
	}
	return 0
}

func (x *Order) GetAdjustableTrailingUnit() int32 {
	if x != nil && x.AdjustableTrailingUnit != nil {
		return *x.AdjustableTrailingUnit
	}
	return 0
}

func (x *Order) GetLmtPriceOffset() float64 {
	if x != nil && x.LmtPriceOffset != nil {
		return *x.LmtPriceOffset
	}
	return 0
}

func (x *Order) GetConditions() []*OrderCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Order) GetConditionsCancelOrder() bool {
	if x != nil && x.ConditionsCancelOrder != nil {
		return *x.ConditionsCancelOrder
	}
	return false
}

func (x *Order) GetConditionsIgnoreRth() bool {
	if x != nil && x.ConditionsIgnoreRth != nil {
		return *x.ConditionsIgnoreRth
	}
	return false
}

func (x *Order) GetModelCode() string {
	if x != nil && x.ModelCode != nil {
		return *x.ModelCode
	}
	return ""
}

func (x *Order) GetExtOperator() string {
	if x != nil && x.ExtOperator != nil {
		return *x.ExtOperator
	}
	return ""
}

func (x *Order) GetSoftDollarTier() *SoftDollarTier {
	if x != nil {
		return x.SoftDollarTier
	}
	return nil
}

func (x *Order) GetCashQty() float64 {
	if x != nil && x.CashQty != nil {
		return *x.CashQty
	}
	return 0
}

func (x *Order) GetMifid2DecisionMaker() string {
	if x != nil && x.Mifid2DecisionMaker != nil {
		return *x.Mifid2DecisionMaker
	}
	return ""
}

func (x *Order) GetMifid2DecisionAlgo() string {
	if x != nil && x.Mifid2DecisionAlgo != nil {
		return *x.Mifid2DecisionAlgo
	}
	return ""
}

func (x *Order) GetMifid2ExecutionTrader() string {
	if x != nil && x.Mifid2ExecutionTrader != nil {
		return *x.Mifid2ExecutionTrader
	}
	return ""
}

func (x *Order) GetMifid2ExecutionAlgo() string {
	if x != nil && x.Mifid2ExecutionAlgo != nil {
		return *x.Mifid2ExecutionAlgo
	}
	return ""
}

func (x *Order) GetDontUseAutoPriceForHedge() bool {
	if x != nil && x.DontUseAutoPriceForHedge != nil {
		return *x.DontUseAutoPriceForHedge
	}
	return false
}

func (x *Order) GetIsOmsContainer() bool {
	if x != nil && x.IsOmsContainer != nil {
		return *x.IsOmsContainer
	}
	return false
}

func (x *Order) GetDiscretionaryUpToLimitPrice() bool {
	if x != nil && x.DiscretionaryUpToLimitPrice != nil {
		return *x.DiscretionaryUpToLimitPrice
	}
	return false
}

func (x *Order) GetAutoCancelDate() string {
	if x != nil && x.AutoCancelDate != nil {
		return *x.AutoCancelDate
	}
	return ""
}

func (x *Order) GetFilledQuantity() string {
	if x != nil && x.FilledQuantity != nil {
		return *x.FilledQuantity
	}
	return ""
}

func (x *Order) GetRefFuturesConId() int32 {
	if x != nil && x.RefFuturesConId != nil {
		return *x.RefFuturesConId
	}
	return 0
}

func (x *Order) GetAutoCancelParent() bool {
	if x != nil && x.AutoCancelParent != nil {
		return *x.AutoCancelParent
	}
	return false
}

func (x *Order) GetShareholder() string {
	if x != nil && x.Shareholder != nil {
		return *x.Shareholder
	}
	return ""
}

func (x *Order) GetImbalanceOnly() bool {
	if x != nil && x.ImbalanceOnly != nil {
		return *x.ImbalanceOnly
	}
	return false
}

func (x *Order) GetRouteMarketableToBbo() bool {
	if x != nil && x.RouteMarketableToBbo != nil {
		return *x.RouteMarketableToBbo
	}
	return false
}

func (x *Order) GetParentPermId() int64 {
	if x != nil && x.ParentPermId != nil {
		return *x.ParentPermId
	}
	return 0
}

func (x *Order) GetUsePriceMgmtAlgo() int32 {
	if x != nil && x.UsePriceMgmtAlgo != nil {
		return *x.UsePriceMgmtAlgo
	}
	return 0
}

func (x *Order) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *Order) GetPostToAts() int32 {
	if x != nil && x.PostToAts != nil {
		return *x.PostToAts
	}
	return 0
}

func (x *Order) GetAdvancedErrorOverride() string {
	if x != nil && x.AdvancedErrorOverride != nil {
		return *x.AdvancedErrorOverride
	}
	return ""
}

func (x *Order) GetManualOrderTime() string {
	if x != nil && x.ManualOrderTime != nil {
		return *x.ManualOrderTime
	}
	return ""
}

func (x *Order) GetMinTradeQty() int32 {
	if x != nil && x.MinTradeQty != nil {
		return *x.MinTradeQty
	}
	return 0
}

func (x *Order) GetMinCompeteSize() int32 {
	if x != nil && x.MinCompeteSize != nil {
		return *x.MinCompeteSize
	}
	return 0
}

func (x *Order) GetCompeteAgainstBestOffset() float64 {
	if x != nil && x.CompeteAgainstBestOffset != nil {
		return *x.CompeteAgainstBestOffset
	}
	return 0
}

func (x *Order) GetMidOffsetAtWhole() float64 {
	if x != nil && x.MidOffsetAtWhole != nil {
		return *x.MidOffsetAtWhole
	}
	return 0
}

func (x *Order) GetMidOffsetAtHalf() float64 {
	if x != nil && x.MidOffsetAtHalf != nil {
		return *x.MidOffsetAtHalf
	}
	return 0
}

func (x *Order) GetCustomerAccount() string {
	if x != nil && x.CustomerAccount != nil {
		return *x.CustomerAccount
	}
	return ""
}

func (x *Order) GetProfessionalCustomer() bool {
	if x != nil && x.ProfessionalCustomer != nil {
		return *x.ProfessionalCustomer
	}
	return false
}

func (x *Order) GetBondAccruedInterest() string {
	if x != nil && x.BondAccruedInterest != nil {
		return *x.BondAccruedInterest
	}
	return ""
}

func (x *Order) GetIncludeOvernight() bool {
	if x != nil && x.IncludeOvernight != nil {
		return *x.IncludeOvernight
	}
	return false
}

func (x *Order) GetManualOrderIndicator() int32 {
	if x != nil && x.ManualOrderIndicator != nil {
		return *x.ManualOrderIndicator
	}
	return 0
}

func (x *Order) GetSubmitter() string {
	if x != nil && x.Submitter != nil {
		return *x.Submitter
	}
	return ""
}

func (x *Order) GetDeactivate() bool {
	if x != nil && x.Deactivate != nil {
		return *x.Deactivate
	}
	return false
}

func (x *Order) GetPostOnly() bool {
	if x != nil && x.PostOnly != nil {
		return *x.PostOnly
	}
	return false
}

func (x *Order) GetAllowPreOpen() bool {
	if x != nil && x.AllowPreOpen != nil {
		return *x.AllowPreOpen
	}
	return false
}

func (x *Order) GetIgnoreOpenAuction() bool {
	if x != nil && x.IgnoreOpenAuction != nil {
		return *x.IgnoreOpenAuction
	}
	return false
}

var File_Order_proto protoreflect.FileDescriptor

const file_Order_proto_rawDesc = "" +
	"\n" +
	"\vOrder.proto\x12\bprotobuf\x1a\x14OrderCondition.proto\x1a\x14SoftDollarTier.proto\"\xa3J\n" +
	"\x05Order\x12\x1f\n" +
	"\bclientId\x18\x01 \x01(\x05H\x00R\bclientId\x88\x01\x01\x12\x1d\n" +
	"\aorderId\x18\x02 \x01(\x05H\x01R\aorderId\x88\x01\x01\x12\x1b\n" +
	"\x06permId\x18\x03 \x01(\x03H\x02R\x06permId\x88\x01\x01\x12\x1f\n" +
	"\bparentId\x18\x04 \x01(\x05H\x03R\bparentId\x88\x01\x01\x12\x1b\n" +
	"\x06action\x18\x05 \x01(\tH\x04R\x06action\x88\x01\x01\x12)\n" +
	"\rtotalQuantity\x18\x06 \x01(\tH\x05R\rtotalQuantity\x88\x01\x01\x12%\n" +
	"\vdisplaySize\x18\a \x01(\x05H\x06R\vdisplaySize\x88\x01\x01\x12!\n" +
	"\torderType\x18\b \x01(\tH\aR\torderType\x88\x01\x01\x12\x1f\n" +
	"\blmtPrice\x18\t \x01(\x01H\bR\blmtPrice\x88\x01\x01\x12\x1f\n" +
	"\bauxPrice\x18\n" +
	" \x01(\x01H\tR\bauxPrice\x88\x01\x01\x12\x15\n" +
	"\x03tif\x18\v \x01(\tH\n" +
	"R\x03tif\x88\x01\x01\x12\x1d\n" +
	"\aaccount\x18\f \x01(\tH\vR\aaccount\x88\x01\x01\x12'\n" +
	"\fsettlingFirm\x18\r \x01(\tH\fR\fsettlingFirm\x88\x01\x01\x12-\n" +
	"\x0fclearingAccount\x18\x0e \x01(\tH\rR\x0fclearingAccount\x88\x01\x01\x12+\n" +
	"\x0eclearingIntent\x18\x0f \x01(\tH\x0eR\x0eclearingIntent\x88\x01\x01\x12!\n" +
	"\tallOrNone\x18\x10 \x01(\bH\x0fR\tallOrNone\x88\x01\x01\x12#\n" +
	"\n" +
	"blockOrder\x18\x11 \x01(\bH\x10R\n" +
	"blockOrder\x88\x01\x01\x12\x1b\n" +
	"\x06hidden\x18\x12 \x01(\bH\x11R\x06hidden\x88\x01\x01\x12#\n" +
	"\n" +
	"outsideRth\x18\x13 \x01(\bH\x12R\n" +
	"outsideRth\x88\x01\x01\x12%\n" +
	"\vsweepToFill\x18\x14 \x01(\bH\x13R\vsweepToFill\x88\x01\x01\x12)\n" +
	"\rpercentOffset\x18\x15 \x01(\x01H\x14R\rpercentOffset\x88\x01\x01\x12-\n" +
	"\x0ftrailingPercent\x18\x16 \x01(\x01H\x15R\x0ftrailingPercent\x88\x01\x01\x12+\n" +
	"\x0etrailStopPrice\x18\x17 \x01(\x01H\x16R\x0etrailStopPrice\x88\x01\x01\x12\x1b\n" +
	"\x06minQty\x18\x18 \x01(\x05H\x17R\x06minQty\x88\x01\x01\x12)\n" +
	"\rgoodAfterTime\x18\x19 \x01(\tH\x18R\rgoodAfterTime\x88\x01\x01\x12'\n" +
	"\fgoodTillDate\x18\x1a \x01(\tH\x19R\fgoodTillDate\x88\x01\x01\x12\x1f\n" +
	"\bocaGroup\x18\x1b \x01(\tH\x1aR\bocaGroup\x88\x01\x01\x12\x1f\n" +
	"\borderRef\x18\x1c \x01(\tH\x1bR\borderRef\x88\x01\x01\x12\x1d\n" +
	"\arule80A\x18\x1d \x01(\tH\x1cR\arule80A\x88\x01\x01\x12\x1d\n" +
	"\aocaType\x18\x1e \x01(\x05H\x1dR\aocaType\x88\x01\x01\x12)\n" +
	"\rtriggerMethod\x18\x1f \x01(\x05H\x1eR\rtriggerMethod\x88\x01\x01\x12-\n" +
	"\x0factiveStartTime\x18  \x01(\tH\x1fR\x0factiveStartTime\x88\x01\x01\x12+\n" +
	"\x0eactiveStopTime\x18! \x01(\tH R\x0eactiveStopTime\x88\x01\x01\x12\x1d\n" +
	"\afaGroup\x18\" \x01(\tH!R\afaGroup\x88\x01\x01\x12\x1f\n" +
	"\bfaMethod\x18# \x01(\tH\"R\bfaMethod\x88\x01\x01\x12'\n" +
	"\ffaPercentage\x18$ \x01(\tH#R\ffaPercentage\x88\x01\x01\x12#\n" +
	"\n" +
	"volatility\x18% \x01(\x01H$R\n" +
	"volatility\x88\x01\x01\x12+\n" +
	"\x0evolatilityType\x18& \x01(\x05H%R\x0evolatilityType\x88\x01\x01\x12/\n" +
	"\x10continuousUpdate\x18' \x01(\bH&R\x10continuousUpdate\x88\x01\x01\x123\n" +
	"\x12referencePriceType\x18( \x01(\x05H'R\x12referencePriceType\x88\x01\x01\x129\n" +
	"\x15deltaNeutralOrderType\x18) \x01(\tH(R\x15deltaNeutralOrderType\x88\x01\x01\x127\n" +
	"\x14deltaNeutralAuxPrice\x18* \x01(\x01H)R\x14deltaNeutralAuxPrice\x88\x01\x01\x121\n" +
	"\x11deltaNeutralConId\x18+ \x01(\x05H*R\x11deltaNeutralConId\x88\x01\x01\x129\n" +
	"\x15deltaNeutralOpenClose\x18, \x01(\tH+R\x15deltaNeutralOpenClose\x88\x01\x01\x129\n" +
	"\x15deltaNeutralShortSale\x18- \x01(\bH,R\x15deltaNeutralShortSale\x88\x01\x01\x12A\n" +
	"\x19deltaNeutralShortSaleSlot\x18. \x01(\x05H-R\x19deltaNeutralShortSaleSlot\x88\x01\x01\x12K\n" +
	"\x1edeltaNeutralDesignatedLocation\x18/ \x01(\tH.R\x1edeltaNeutralDesignatedLocation\x88\x01\x01\x123\n" +
	"\x12scaleInitLevelSize\x180 \x01(\x05H/R\x12scaleInitLevelSize\x88\x01\x01\x123\n" +
	"\x12scaleSubsLevelSize\x181 \x01(\x05H0R\x12scaleSubsLevelSize\x88\x01\x01\x125\n" +
	"\x13scalePriceIncrement\x182 \x01(\x01H1R\x13scalePriceIncrement\x88\x01\x01\x129\n" +
	"\x15scalePriceAdjustValue\x183 \x01(\x01H2R\x15scalePriceAdjustValue\x88\x01\x01\x12?\n" +
	"\x18scalePriceAdjustInterval\x184 \x01(\x05H3R\x18scalePriceAdjustInterval\x88\x01\x01\x121\n" +
	"\x11scaleProfitOffset\x185 \x01(\x01H4R\x11scaleProfitOffset\x88\x01\x01\x12+\n" +
	"\x0escaleAutoReset\x186 \x01(\bH5R\x0escaleAutoReset\x88\x01\x01\x121\n" +
	"\x11scaleInitPosition\x187 \x01(\x05H6R\x11scaleInitPosition\x88\x01\x01\x12/\n" +
	"\x10scaleInitFillQty\x188 \x01(\x05H7R\x10scaleInitFillQty\x88\x01\x01\x123\n" +
	"\x12scaleRandomPercent\x189 \x01(\bH8R\x12scaleRandomPercent\x88\x01\x01\x12#\n" +
	"\n" +
	"scaleTable\x18: \x01(\tH9R\n" +
	"scaleTable\x88\x01\x01\x12!\n" +
	"\thedgeType\x18; \x01(\tH:R\thedgeType\x88\x01\x01\x12#\n" +
	"\n" +
	"hedgeParam\x18< \x01(\tH;R\n" +
	"hedgeParam\x88\x01\x01\x12'\n" +
	"\falgoStrategy\x18= \x01(\tH<R\falgoStrategy\x88\x01\x01\x12?\n" +
	"\n" +
	"algoParams\x18> \x03(\v2\x1f.protobuf.Order.AlgoParamsEntryR\n" +
	"algoParams\x12\x1b\n" +
	"\x06algoId\x18? \x01(\tH=R\x06algoId\x88\x01\x01\x12f\n" +
	"\x17smartComboRoutingParams\x18@ \x03(\v2,.protobuf.Order.SmartComboRoutingParamsEntryR\x17smartComboRoutingParams\x12\x1b\n" +
	"\x06whatIf\x18A \x01(\bH>R\x06whatIf\x88\x01\x01\x12\x1f\n" +
	"\btransmit\x18B \x01(\bH?R\btransmit\x88\x01\x01\x12I\n" +
	"\x1doverridePercentageConstraints\x18C \x01(\bH@R\x1doverridePercentageConstraints\x88\x01\x01\x12!\n" +
	"\topenClose\x18D \x01(\tHAR\topenClose\x88\x01\x01\x12\x1b\n" +
	"\x06origin\x18E \x01(\x05HBR\x06origin\x88\x01\x01\x12)\n" +
	"\rshortSaleSlot\x18F \x01(\x05HCR\rshortSaleSlot\x88\x01\x01\x123\n" +
	"\x12designatedLocation\x18G \x01(\tHDR\x12designatedLocation\x88\x01\x01\x12#\n" +
	"\n" +
	"exemptCode\x18H \x01(\x05HER\n" +
	"exemptCode\x88\x01\x01\x12?\n" +
	"\x18deltaNeutralSettlingFirm\x18I \x01(\tHFR\x18deltaNeutralSettlingFirm\x88\x01\x01\x12E\n" +
	"\x1bdeltaNeutralClearingAccount\x18J \x01(\tHGR\x1bdeltaNeutralClearingAccount\x88\x01\x01\x12C\n" +
	"\x1adeltaNeutralClearingIntent\x18K \x01(\tHHR\x1adeltaNeutralClearingIntent\x88\x01\x01\x12/\n" +
	"\x10discretionaryAmt\x18L \x01(\x01HIR\x10discretionaryAmt\x88\x01\x01\x123\n" +
	"\x12optOutSmartRouting\x18M \x01(\bHJR\x12optOutSmartRouting\x88\x01\x01\x12)\n" +
	"\rstartingPrice\x18N \x01(\x01HKR\rstartingPrice\x88\x01\x01\x12)\n" +
	"\rstockRefPrice\x18O \x01(\x01HLR\rstockRefPrice\x88\x01\x01\x12\x19\n" +
	"\x05delta\x18P \x01(\x01HMR\x05delta\x88\x01\x01\x12-\n" +
	"\x0fstockRangeLower\x18Q \x01(\x01HNR\x0fstockRangeLower\x88\x01\x01\x12-\n" +
	"\x0fstockRangeUpper\x18R \x01(\x01HOR\x0fstockRangeUpper\x88\x01\x01\x12\x1d\n" +
	"\anotHeld\x18S \x01(\bHPR\anotHeld\x88\x01\x01\x12Q\n" +
	"\x10orderMiscOptions\x18T \x03(\v2%.protobuf.Order.OrderMiscOptionsEntryR\x10orderMiscOptions\x12!\n" +
	"\tsolicited\x18U \x01(\bHQR\tsolicited\x88\x01\x01\x12)\n" +
	"\rrandomizeSize\x18V \x01(\bHRR\rrandomizeSize\x88\x01\x01\x12+\n" +
	"\x0erandomizePrice\x18W \x01(\bHSR\x0erandomizePrice\x88\x01\x01\x125\n" +
	"\x13referenceContractId\x18X \x01(\x05HTR\x13referenceContractId\x88\x01\x01\x123\n" +
	"\x12peggedChangeAmount\x18Y \x01(\x01HUR\x12peggedChangeAmount\x88\x01\x01\x12G\n" +
	"\x1cisPeggedChangeAmountDecrease\x18Z \x01(\bHVR\x1cisPeggedChangeAmountDecrease\x88\x01\x01\x129\n" +
	"\x15referenceChangeAmount\x18[ \x01(\x01HWR\x15referenceChangeAmount\x88\x01\x01\x125\n" +
	"\x13referenceExchangeId\x18\\ \x01(\tHXR\x13referenceExchangeId\x88\x01\x01\x121\n" +
	"\x11adjustedOrderType\x18] \x01(\tHYR\x11adjustedOrderType\x88\x01\x01\x12'\n" +
	"\ftriggerPrice\x18^ \x01(\x01HZR\ftriggerPrice\x88\x01\x01\x121\n" +
	"\x11adjustedStopPrice\x18_ \x01(\x01H[R\x11adjustedStopPrice\x88\x01\x01\x12;\n" +
	"\x16adjustedStopLimitPrice\x18` \x01(\x01H\\R\x16adjustedStopLimitPrice\x88\x01\x01\x12;\n" +
	"\x16adjustedTrailingAmount\x18a \x01(\x01H]R\x16adjustedTrailingAmount\x88\x01\x01\x12;\n" +
	"\x16adjustableTrailingUnit\x18b \x01(\x05H^R\x16adjustableTrailingUnit\x88\x01\x01\x12+\n" +
	"\x0elmtPriceOffset\x18c \x01(\x01H_R\x0elmtPriceOffset\x88\x01\x01\x128\n" +
	"\n" +
	"conditions\x18d \x03(\v2\x18.protobuf.OrderConditionR\n" +
	"conditions\x129\n" +
	"\x15conditionsCancelOrder\x18e \x01(\bH`R\x15conditionsCancelOrder\x88\x01\x01\x125\n" +
	"\x13conditionsIgnoreRth\x18f \x01(\bHaR\x13conditionsIgnoreRth\x88\x01\x01\x12!\n" +
	"\tmodelCode\x18g \x01(\tHbR\tmodelCode\x88\x01\x01\x12%\n" +
	"\vextOperator\x18h \x01(\tHcR\vextOperator\x88\x01\x01\x12E\n" +
	"\x0esoftDollarTier\x18i \x01(\v2\x18.protobuf.SoftDollarTierHdR\x0esoftDollarTier\x88\x01\x01\x12\x1d\n" +
	"\acashQty\x18j \x01(\x01HeR\acashQty\x88\x01\x01\x125\n" +
	"\x13mifid2DecisionMaker\x18k \x01(\tHfR\x13mifid2DecisionMaker\x88\x01\x01\x123\n" +
	"\x12mifid2DecisionAlgo\x18l \x01(\tHgR\x12mifid2DecisionAlgo\x88\x01\x01\x129\n" +
	"\x15mifid2ExecutionTrader\x18m \x01(\tHhR\x15mifid2ExecutionTrader\x88\x01\x01\x125\n" +
	"\x13mifid2ExecutionAlgo\x18n \x01(\tHiR\x13mifid2ExecutionAlgo\x88\x01\x01\x12?\n" +
	"\x18dontUseAutoPriceForHedge\x18o \x01(\bHjR\x18dontUseAutoPriceForHedge\x88\x01\x01\x12+\n" +
	"\x0eisOmsContainer\x18p \x01(\bHkR\x0eisOmsContainer\x88\x01\x01\x12E\n" +
	"\x1bdiscretionaryUpToLimitPrice\x18q \x01(\bHlR\x1bdiscretionaryUpToLimitPrice\x88\x01\x01\x12+\n" +
	"\x0eautoCancelDate\x18r \x01(\tHmR\x0eautoCancelDate\x88\x01\x01\x12+\n" +
	"\x0efilledQuantity\x18s \x01(\tHnR\x0efilledQuantity\x88\x01\x01\x12-\n" +
	"\x0frefFuturesConId\x18t \x01(\x05HoR\x0frefFuturesConId\x88\x01\x01\x12/\n" +
	"\x10autoCancelParent\x18u \x01(\bHpR\x10autoCancelParent\x88\x01\x01\x12%\n" +
	"\vshareholder\x18v \x01(\tHqR\vshareholder\x88\x01\x01\x12)\n" +
	"\rimbalanceOnly\x18w \x01(\bHrR\rimbalanceOnly\x88\x01\x01\x127\n" +
	"\x14routeMarketableToBbo\x18x \x01(\bHsR\x14routeMarketableToBbo\x88\x01\x01\x12'\n" +
	"\fparentPermId\x18y \x01(\x03HtR\fparentPermId\x88\x01\x01\x12/\n" +
	"\x10usePriceMgmtAlgo\x18z \x01(\x05HuR\x10usePriceMgmtAlgo\x88\x01\x01\x12\x1f\n" +
	"\bduration\x18{ \x01(\x05HvR\bduration\x88\x01\x01\x12!\n" +
	"\tpostToAts\x18| \x01(\x05HwR\tpostToAts\x88\x01\x01\x129\n" +
	"\x15advancedErrorOverride\x18} \x01(\tHxR\x15advancedErrorOverride\x88\x01\x01\x12-\n" +
	"\x0fmanualOrderTime\x18~ \x01(\tHyR\x0fmanualOrderTime\x88\x01\x01\x12%\n" +
	"\vminTradeQty\x18\x7f \x01(\x05HzR\vminTradeQty\x88\x01\x01\x12,\n" +
	"\x0eminCompeteSize\x18\x80\x01 \x01(\x05H{R\x0eminCompeteSize\x88\x01\x01\x12@\n" +
	"\x18competeAgainstBestOffset\x18\x81\x01 \x01(\x01H|R\x18competeAgainstBestOffset\x88\x01\x01\x120\n" +
	"\x10midOffsetAtWhole\x18\x82\x01 \x01(\x01H}R\x10midOffsetAtWhole\x88\x01\x01\x12.\n" +
	"\x0fmidOffsetAtHalf\x18\x83\x01 \x01(\x01H~R\x0fmidOffsetAtHalf\x88\x01\x01\x12.\n" +
	"\x0fcustomerAccount\x18\x84\x01 \x01(\tH\x7fR\x0fcustomerAccount\x88\x01\x01\x129\n" +
	"\x14professionalCustomer\x18\x85\x01 \x01(\bH\x80\x01R\x14professionalCustomer\x88\x01\x01\x127\n" +
	"\x13bondAccruedInterest\x18\x86\x01 \x01(\tH\x81\x01R\x13bondAccruedInterest\x88\x01\x01\x121\n" +
	"\x10includeOvernight\x18\x87\x01 \x01(\bH\x82\x01R\x10includeOvernight\x88\x01\x01\x129\n" +
	"\x14manualOrderIndicator\x18\x88\x01 \x01(\x05H\x83\x01R\x14manualOrderIndicator\x88\x01\x01\x12#\n" +
	"\tsubmitter\x18\x89\x01 \x01(\tH\x84\x01R\tsubmitter\x88\x01\x01\x12%\n" +
	"\n" +
	"deactivate\x18\x8a\x01 \x01(\bH\x85\x01R\n" +
	"deactivate\x88\x01\x01\x12!\n" +
	"\bpostOnly\x18\x8b\x01 \x01(\bH\x86\x01R\bpostOnly\x88\x01\x01\x12)\n" +
	"\fallowPreOpen\x18\x8c\x01 \x01(\bH\x87\x01R\fallowPreOpen\x88\x01\x01\x123\n" +
	"\x11ignoreOpenAuction\x18\x8d\x01 \x01(\bH\x88\x01R\x11ignoreOpenAuction\x88\x01\x01\x1a=\n" +
	"\x0fAlgoParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aJ\n" +
	"\x1cSmartComboRoutingParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aC\n" +
	"\x15OrderMiscOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\v\n" +
	"\t_clientIdB\n" +
	"\n" +
	"\b_orderIdB\t\n" +
	"\a_permIdB\v\n" +
	"\t_parentIdB\t\n" +
	"\a_actionB\x10\n" +
	"\x0e_totalQuantityB\x0e\n" +
	"\f_displaySizeB\f\n" +
	"\n" +
	"_orderTypeB\v\n" +
	"\t_lmtPriceB\v\n" +
	"\t_auxPriceB\x06\n" +
	"\x04_tifB\n" +
	"\n" +
	"\b_accountB\x0f\n" +
	"\r_settlingFirmB\x12\n" +
	"\x10_clearingAccountB\x11\n" +
	"\x0f_clearingIntentB\f\n" +
	"\n" +
	"_allOrNoneB\r\n" +
	"\v_blockOrderB\t\n" +
	"\a_hiddenB\r\n" +
	"\v_outsideRthB\x0e\n" +
	"\f_sweepToFillB\x10\n" +
	"\x0e_percentOffsetB\x12\n" +
	"\x10_trailingPercentB\x11\n" +
	"\x0f_trailStopPriceB\t\n" +
	"\a_minQtyB\x10\n" +
	"\x0e_goodAfterTimeB\x0f\n" +
	"\r_goodTillDateB\v\n" +
	"\t_ocaGroupB\v\n" +
	"\t_orderRefB\n" +
	"\n" +
	"\b_rule80AB\n" +
	"\n" +
	"\b_ocaTypeB\x10\n" +
	"\x0e_triggerMethodB\x12\n" +
	"\x10_activeStartTimeB\x11\n" +
	"\x0f_activeStopTimeB\n" +
	"\n" +
	"\b_faGroupB\v\n" +
	"\t_faMethodB\x0f\n" +
	"\r_faPercentageB\r\n" +
	"\v_volatilityB\x11\n" +
	"\x0f_volatilityTypeB\x13\n" +
	"\x11_continuousUpdateB\x15\n" +
	"\x13_referencePriceTypeB\x18\n" +
	"\x16_deltaNeutralOrderTypeB\x17\n" +
	"\x15_deltaNeutralAuxPriceB\x14\n" +
	"\x12_deltaNeutralConIdB\x18\n" +
	"\x16_deltaNeutralOpenCloseB\x18\n" +
	"\x16_deltaNeutralShortSaleB\x1c\n" +
	"\x1a_deltaNeutralShortSaleSlotB!\n" +
	"\x1f_deltaNeutralDesignatedLocationB\x15\n" +
	"\x13_scaleInitLevelSizeB\x15\n" +
	"\x13_scaleSubsLevelSizeB\x16\n" +
	"\x14_scalePriceIncrementB\x18\n" +
	"\x16_scalePriceAdjustValueB\x1b\n" +
	"\x19_scalePriceAdjustIntervalB\x14\n" +
	"\x12_scaleProfitOffsetB\x11\n" +
	"\x0f_scaleAutoResetB\x14\n" +
	"\x12_scaleInitPositionB\x13\n" +
	"\x11_scaleInitFillQtyB\x15\n" +
	"\x13_scaleRandomPercentB\r\n" +
	"\v_scaleTableB\f\n" +
	"\n" +
	"_hedgeTypeB\r\n" +
	"\v_hedgeParamB\x0f\n" +
	"\r_algoStrategyB\t\n" +
	"\a_algoIdB\t\n" +
	"\a_whatIfB\v\n" +
	"\t_transmitB \n" +
	"\x1e_overridePercentageConstraintsB\f\n" +
	"\n" +
	"_openCloseB\t\n" +
	"\a_originB\x10\n" +
	"\x0e_shortSaleSlotB\x15\n" +
	"\x13_designatedLocationB\r\n" +
	"\v_exemptCodeB\x1b\n" +
	"\x19_deltaNeutralSettlingFirmB\x1e\n" +
	"\x1c_deltaNeutralClearingAccountB\x1d\n" +
	"\x1b_deltaNeutralClearingIntentB\x13\n" +
	"\x11_discretionaryAmtB\x15\n" +
	"\x13_optOutSmartRoutingB\x10\n" +
	"\x0e_startingPriceB\x10\n" +
	"\x0e_stockRefPriceB\b\n" +
	"\x06_deltaB\x12\n" +
	"\x10_stockRangeLowerB\x12\n" +
	"\x10_stockRangeUpperB\n" +
	"\n" +
	"\b_notHeldB\f\n" +
	"\n" +
	"_solicitedB\x10\n" +
	"\x0e_randomizeSizeB\x11\n" +
	"\x0f_randomizePriceB\x16\n" +
	"\x14_referenceContractIdB\x15\n" +
	"\x13_peggedChangeAmountB\x1f\n" +
	"\x1d_isPeggedChangeAmountDecreaseB\x18\n" +
	"\x16_referenceChangeAmountB\x16\n" +
	"\x14_referenceExchangeIdB\x14\n" +
	"\x12_adjustedOrderTypeB\x0f\n" +
	"\r_triggerPriceB\x14\n" +
	"\x12_adjustedStopPriceB\x19\n" +
	"\x17_adjustedStopLimitPriceB\x19\n" +
	"\x17_adjustedTrailingAmountB\x19\n" +
	"\x17_adjustableTrailingUnitB\x11\n" +
	"\x0f_lmtPriceOffsetB\x18\n" +
	"\x16_conditionsCancelOrderB\x16\n" +
	"\x14_conditionsIgnoreRthB\f\n" +
	"\n" +
	"_modelCodeB\x0e\n" +
	"\f_extOperatorB\x11\n" +
	"\x0f_softDollarTierB\n" +
	"\n" +
	"\b_cashQtyB\x16\n" +
	"\x14_mifid2DecisionMakerB\x15\n" +
	"\x13_mifid2DecisionAlgoB\x18\n" +
	"\x16_mifid2ExecutionTraderB\x16\n" +
	"\x14_mifid2ExecutionAlgoB\x1b\n" +
	"\x19_dontUseAutoPriceForHedgeB\x11\n" +
	"\x0f_isOmsContainerB\x1e\n" +
	"\x1c_discretionaryUpToLimitPriceB\x11\n" +
	"\x0f_autoCancelDateB\x11\n" +
	"\x0f_filledQuantityB\x12\n" +
	"\x10_refFuturesConIdB\x13\n" +
	"\x11_autoCancelParentB\x0e\n" +
	"\f_shareholderB\x10\n" +
	"\x0e_imbalanceOnlyB\x17\n" +
	"\x15_routeMarketableToBboB\x0f\n" +
	"\r_parentPermIdB\x13\n" +
	"\x11_usePriceMgmtAlgoB\v\n" +
	"\t_durationB\f\n" +
	"\n" +
	"_postToAtsB\x18\n" +
	"\x16_advancedErrorOverrideB\x12\n" +
	"\x10_manualOrderTimeB\x0e\n" +
	"\f_minTradeQtyB\x11\n" +
	"\x0f_minCompeteSizeB\x1b\n" +
	"\x19_competeAgainstBestOffsetB\x13\n" +
	"\x11_midOffsetAtWholeB\x12\n" +
	"\x10_midOffsetAtHalfB\x12\n" +
	"\x10_customerAccountB\x17\n" +
	"\x15_professionalCustomerB\x16\n" +
	"\x14_bondAccruedInterestB\x13\n" +
	"\x11_includeOvernightB\x17\n" +
	"\x15_manualOrderIndicatorB\f\n" +
	"\n" +
	"_submitterB\r\n" +
	"\v_deactivateB\v\n" +
	"\t_postOnlyB\x0f\n" +
	"\r_allowPreOpenB\x14\n" +
	"\x12_ignoreOpenAuctionB\fZ\n" +
	".;protobufb\x06proto3"

var (
	file_Order_proto_rawDescOnce sync.Once
	file_Order_proto_rawDescData []byte
)

func file_Order_proto_rawDescGZIP() []byte {
	file_Order_proto_rawDescOnce.Do(func() {
		file_Order_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Order_proto_rawDesc), len(file_Order_proto_rawDesc)))
	})
	return file_Order_proto_rawDescData
}

var file_Order_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_Order_proto_goTypes = []any{
	(*Order)(nil),          // 0: protobuf.Order
	nil,                    // 1: protobuf.Order.AlgoParamsEntry
	nil,                    // 2: protobuf.Order.SmartComboRoutingParamsEntry
	nil,                    // 3: protobuf.Order.OrderMiscOptionsEntry
	(*OrderCondition)(nil), // 4: protobuf.OrderCondition
	(*SoftDollarTier)(nil), // 5: protobuf.SoftDollarTier
}
var file_Order_proto_depIdxs = []int32{
	1, // 0: protobuf.Order.algoParams:type_name -> protobuf.Order.AlgoParamsEntry
	2, // 1: protobuf.Order.smartComboRoutingParams:type_name -> protobuf.Order.SmartComboRoutingParamsEntry
	3, // 2: protobuf.Order.orderMiscOptions:type_name -> protobuf.Order.OrderMiscOptionsEntry
	4, // 3: protobuf.Order.conditions:type_name -> protobuf.OrderCondition
	5, // 4: protobuf.Order.softDollarTier:type_name -> protobuf.SoftDollarTier
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_Order_proto_init() }
func file_Order_proto_init() {
	if File_Order_proto != nil {
		return
	}
	file_OrderCondition_proto_init()
	file_SoftDollarTier_proto_init()
	file_Order_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Order_proto_rawDesc), len(file_Order_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Order_proto_goTypes,
		DependencyIndexes: file_Order_proto_depIdxs,
		MessageInfos:      file_Order_proto_msgTypes,
	}.Build()
	File_Order_proto = out.File
	file_Order_proto_goTypes = nil
	file_Order_proto_depIdxs = nil
}
