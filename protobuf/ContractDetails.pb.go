// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.21.12
// source: ContractDetails.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContractDetails struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	MarketName             *string                `protobuf:"bytes,1,opt,name=marketName,proto3,oneof" json:"marketName,omitempty"`
	MinTick                *string                `protobuf:"bytes,2,opt,name=minTick,proto3,oneof" json:"minTick,omitempty"`
	OrderTypes             *string                `protobuf:"bytes,3,opt,name=orderTypes,proto3,oneof" json:"orderTypes,omitempty"`
	ValidExchanges         *string                `protobuf:"bytes,4,opt,name=validExchanges,proto3,oneof" json:"validExchanges,omitempty"`
	PriceMagnifier         *int32                 `protobuf:"varint,5,opt,name=priceMagnifier,proto3,oneof" json:"priceMagnifier,omitempty"`
	UnderConId             *int32                 `protobuf:"varint,6,opt,name=underConId,proto3,oneof" json:"underConId,omitempty"`
	LongName               *string                `protobuf:"bytes,7,opt,name=longName,proto3,oneof" json:"longName,omitempty"`
	ContractMonth          *string                `protobuf:"bytes,8,opt,name=contractMonth,proto3,oneof" json:"contractMonth,omitempty"`
	Industry               *string                `protobuf:"bytes,9,opt,name=industry,proto3,oneof" json:"industry,omitempty"`
	Category               *string                `protobuf:"bytes,10,opt,name=category,proto3,oneof" json:"category,omitempty"`
	Subcategory            *string                `protobuf:"bytes,11,opt,name=subcategory,proto3,oneof" json:"subcategory,omitempty"`
	TimeZoneId             *string                `protobuf:"bytes,12,opt,name=timeZoneId,proto3,oneof" json:"timeZoneId,omitempty"`
	TradingHours           *string                `protobuf:"bytes,13,opt,name=tradingHours,proto3,oneof" json:"tradingHours,omitempty"`
	LiquidHours            *string                `protobuf:"bytes,14,opt,name=liquidHours,proto3,oneof" json:"liquidHours,omitempty"`
	EvRule                 *string                `protobuf:"bytes,15,opt,name=evRule,proto3,oneof" json:"evRule,omitempty"`
	EvMultiplier           *float64               `protobuf:"fixed64,16,opt,name=evMultiplier,proto3,oneof" json:"evMultiplier,omitempty"`
	SecIdList              map[string]string      `protobuf:"bytes,17,rep,name=secIdList,proto3" json:"secIdList,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AggGroup               *int32                 `protobuf:"varint,18,opt,name=aggGroup,proto3,oneof" json:"aggGroup,omitempty"`
	UnderSymbol            *string                `protobuf:"bytes,19,opt,name=underSymbol,proto3,oneof" json:"underSymbol,omitempty"`
	UnderSecType           *string                `protobuf:"bytes,20,opt,name=underSecType,proto3,oneof" json:"underSecType,omitempty"`
	MarketRuleIds          *string                `protobuf:"bytes,21,opt,name=marketRuleIds,proto3,oneof" json:"marketRuleIds,omitempty"`
	RealExpirationDate     *string                `protobuf:"bytes,22,opt,name=realExpirationDate,proto3,oneof" json:"realExpirationDate,omitempty"`
	StockType              *string                `protobuf:"bytes,23,opt,name=stockType,proto3,oneof" json:"stockType,omitempty"`
	MinSize                *string                `protobuf:"bytes,24,opt,name=minSize,proto3,oneof" json:"minSize,omitempty"`
	SizeIncrement          *string                `protobuf:"bytes,25,opt,name=sizeIncrement,proto3,oneof" json:"sizeIncrement,omitempty"`
	SuggestedSizeIncrement *string                `protobuf:"bytes,26,opt,name=suggestedSizeIncrement,proto3,oneof" json:"suggestedSizeIncrement,omitempty"`
	// fund	fields
	FundName                        *string `protobuf:"bytes,27,opt,name=fundName,proto3,oneof" json:"fundName,omitempty"`
	FundFamily                      *string `protobuf:"bytes,28,opt,name=fundFamily,proto3,oneof" json:"fundFamily,omitempty"`
	FundType                        *string `protobuf:"bytes,29,opt,name=fundType,proto3,oneof" json:"fundType,omitempty"`
	FundFrontLoad                   *string `protobuf:"bytes,30,opt,name=fundFrontLoad,proto3,oneof" json:"fundFrontLoad,omitempty"`
	FundBackLoad                    *string `protobuf:"bytes,31,opt,name=fundBackLoad,proto3,oneof" json:"fundBackLoad,omitempty"`
	FundBackLoadTimeInterval        *string `protobuf:"bytes,32,opt,name=fundBackLoadTimeInterval,proto3,oneof" json:"fundBackLoadTimeInterval,omitempty"`
	FundManagementFee               *string `protobuf:"bytes,33,opt,name=fundManagementFee,proto3,oneof" json:"fundManagementFee,omitempty"`
	FundClosed                      *bool   `protobuf:"varint,34,opt,name=fundClosed,proto3,oneof" json:"fundClosed,omitempty"`
	FundClosedForNewInvestors       *bool   `protobuf:"varint,35,opt,name=fundClosedForNewInvestors,proto3,oneof" json:"fundClosedForNewInvestors,omitempty"`
	FundClosedForNewMoney           *bool   `protobuf:"varint,36,opt,name=fundClosedForNewMoney,proto3,oneof" json:"fundClosedForNewMoney,omitempty"`
	FundNotifyAmount                *string `protobuf:"bytes,37,opt,name=fundNotifyAmount,proto3,oneof" json:"fundNotifyAmount,omitempty"`
	FundMinimumInitialPurchase      *string `protobuf:"bytes,38,opt,name=fundMinimumInitialPurchase,proto3,oneof" json:"fundMinimumInitialPurchase,omitempty"`
	FundMinimumSubsequentPurchase   *string `protobuf:"bytes,39,opt,name=fundMinimumSubsequentPurchase,proto3,oneof" json:"fundMinimumSubsequentPurchase,omitempty"`
	FundBlueSkyStates               *string `protobuf:"bytes,40,opt,name=fundBlueSkyStates,proto3,oneof" json:"fundBlueSkyStates,omitempty"`
	FundBlueSkyTerritories          *string `protobuf:"bytes,41,opt,name=fundBlueSkyTerritories,proto3,oneof" json:"fundBlueSkyTerritories,omitempty"`
	FundDistributionPolicyIndicator *string `protobuf:"bytes,42,opt,name=fundDistributionPolicyIndicator,proto3,oneof" json:"fundDistributionPolicyIndicator,omitempty"`
	FundAssetType                   *string `protobuf:"bytes,43,opt,name=fundAssetType,proto3,oneof" json:"fundAssetType,omitempty"`
	// bond fields
	Cusip                   *string                `protobuf:"bytes,44,opt,name=cusip,proto3,oneof" json:"cusip,omitempty"`
	IssueDate               *string                `protobuf:"bytes,45,opt,name=issueDate,proto3,oneof" json:"issueDate,omitempty"`
	Ratings                 *string                `protobuf:"bytes,46,opt,name=ratings,proto3,oneof" json:"ratings,omitempty"`
	BondType                *string                `protobuf:"bytes,47,opt,name=bondType,proto3,oneof" json:"bondType,omitempty"`
	Coupon                  *float64               `protobuf:"fixed64,48,opt,name=coupon,proto3,oneof" json:"coupon,omitempty"`
	CouponType              *string                `protobuf:"bytes,49,opt,name=couponType,proto3,oneof" json:"couponType,omitempty"`
	Convertible             *bool                  `protobuf:"varint,50,opt,name=convertible,proto3,oneof" json:"convertible,omitempty"`
	Callable                *bool                  `protobuf:"varint,51,opt,name=callable,proto3,oneof" json:"callable,omitempty"`
	Puttable                *bool                  `protobuf:"varint,52,opt,name=puttable,proto3,oneof" json:"puttable,omitempty"`
	DescAppend              *string                `protobuf:"bytes,53,opt,name=descAppend,proto3,oneof" json:"descAppend,omitempty"`
	NextOptionDate          *string                `protobuf:"bytes,54,opt,name=nextOptionDate,proto3,oneof" json:"nextOptionDate,omitempty"`
	NextOptionType          *string                `protobuf:"bytes,55,opt,name=nextOptionType,proto3,oneof" json:"nextOptionType,omitempty"`
	NextOptionPartial       *bool                  `protobuf:"varint,56,opt,name=nextOptionPartial,proto3,oneof" json:"nextOptionPartial,omitempty"`
	BondNotes               *string                `protobuf:"bytes,57,opt,name=bondNotes,proto3,oneof" json:"bondNotes,omitempty"`
	IneligibilityReasonList []*IneligibilityReason `protobuf:"bytes,58,rep,name=ineligibilityReasonList,proto3" json:"ineligibilityReasonList,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ContractDetails) Reset() {
	*x = ContractDetails{}
	mi := &file_ContractDetails_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractDetails) ProtoMessage() {}

func (x *ContractDetails) ProtoReflect() protoreflect.Message {
	mi := &file_ContractDetails_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractDetails.ProtoReflect.Descriptor instead.
func (*ContractDetails) Descriptor() ([]byte, []int) {
	return file_ContractDetails_proto_rawDescGZIP(), []int{0}
}

func (x *ContractDetails) GetMarketName() string {
	if x != nil && x.MarketName != nil {
		return *x.MarketName
	}
	return ""
}

func (x *ContractDetails) GetMinTick() string {
	if x != nil && x.MinTick != nil {
		return *x.MinTick
	}
	return ""
}

func (x *ContractDetails) GetOrderTypes() string {
	if x != nil && x.OrderTypes != nil {
		return *x.OrderTypes
	}
	return ""
}

func (x *ContractDetails) GetValidExchanges() string {
	if x != nil && x.ValidExchanges != nil {
		return *x.ValidExchanges
	}
	return ""
}

func (x *ContractDetails) GetPriceMagnifier() int32 {
	if x != nil && x.PriceMagnifier != nil {
		return *x.PriceMagnifier
	}
	return 0
}

func (x *ContractDetails) GetUnderConId() int32 {
	if x != nil && x.UnderConId != nil {
		return *x.UnderConId
	}
	return 0
}

func (x *ContractDetails) GetLongName() string {
	if x != nil && x.LongName != nil {
		return *x.LongName
	}
	return ""
}

func (x *ContractDetails) GetContractMonth() string {
	if x != nil && x.ContractMonth != nil {
		return *x.ContractMonth
	}
	return ""
}

func (x *ContractDetails) GetIndustry() string {
	if x != nil && x.Industry != nil {
		return *x.Industry
	}
	return ""
}

func (x *ContractDetails) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *ContractDetails) GetSubcategory() string {
	if x != nil && x.Subcategory != nil {
		return *x.Subcategory
	}
	return ""
}

func (x *ContractDetails) GetTimeZoneId() string {
	if x != nil && x.TimeZoneId != nil {
		return *x.TimeZoneId
	}
	return ""
}

func (x *ContractDetails) GetTradingHours() string {
	if x != nil && x.TradingHours != nil {
		return *x.TradingHours
	}
	return ""
}

func (x *ContractDetails) GetLiquidHours() string {
	if x != nil && x.LiquidHours != nil {
		return *x.LiquidHours
	}
	return ""
}

func (x *ContractDetails) GetEvRule() string {
	if x != nil && x.EvRule != nil {
		return *x.EvRule
	}
	return ""
}

func (x *ContractDetails) GetEvMultiplier() float64 {
	if x != nil && x.EvMultiplier != nil {
		return *x.EvMultiplier
	}
	return 0
}

func (x *ContractDetails) GetSecIdList() map[string]string {
	if x != nil {
		return x.SecIdList
	}
	return nil
}

func (x *ContractDetails) GetAggGroup() int32 {
	if x != nil && x.AggGroup != nil {
		return *x.AggGroup
	}
	return 0
}

func (x *ContractDetails) GetUnderSymbol() string {
	if x != nil && x.UnderSymbol != nil {
		return *x.UnderSymbol
	}
	return ""
}

func (x *ContractDetails) GetUnderSecType() string {
	if x != nil && x.UnderSecType != nil {
		return *x.UnderSecType
	}
	return ""
}

func (x *ContractDetails) GetMarketRuleIds() string {
	if x != nil && x.MarketRuleIds != nil {
		return *x.MarketRuleIds
	}
	return ""
}

func (x *ContractDetails) GetRealExpirationDate() string {
	if x != nil && x.RealExpirationDate != nil {
		return *x.RealExpirationDate
	}
	return ""
}

func (x *ContractDetails) GetStockType() string {
	if x != nil && x.StockType != nil {
		return *x.StockType
	}
	return ""
}

func (x *ContractDetails) GetMinSize() string {
	if x != nil && x.MinSize != nil {
		return *x.MinSize
	}
	return ""
}

func (x *ContractDetails) GetSizeIncrement() string {
	if x != nil && x.SizeIncrement != nil {
		return *x.SizeIncrement
	}
	return ""
}

func (x *ContractDetails) GetSuggestedSizeIncrement() string {
	if x != nil && x.SuggestedSizeIncrement != nil {
		return *x.SuggestedSizeIncrement
	}
	return ""
}

func (x *ContractDetails) GetFundName() string {
	if x != nil && x.FundName != nil {
		return *x.FundName
	}
	return ""
}

func (x *ContractDetails) GetFundFamily() string {
	if x != nil && x.FundFamily != nil {
		return *x.FundFamily
	}
	return ""
}

func (x *ContractDetails) GetFundType() string {
	if x != nil && x.FundType != nil {
		return *x.FundType
	}
	return ""
}

func (x *ContractDetails) GetFundFrontLoad() string {
	if x != nil && x.FundFrontLoad != nil {
		return *x.FundFrontLoad
	}
	return ""
}

func (x *ContractDetails) GetFundBackLoad() string {
	if x != nil && x.FundBackLoad != nil {
		return *x.FundBackLoad
	}
	return ""
}

func (x *ContractDetails) GetFundBackLoadTimeInterval() string {
	if x != nil && x.FundBackLoadTimeInterval != nil {
		return *x.FundBackLoadTimeInterval
	}
	return ""
}

func (x *ContractDetails) GetFundManagementFee() string {
	if x != nil && x.FundManagementFee != nil {
		return *x.FundManagementFee
	}
	return ""
}

func (x *ContractDetails) GetFundClosed() bool {
	if x != nil && x.FundClosed != nil {
		return *x.FundClosed
	}
	return false
}

func (x *ContractDetails) GetFundClosedForNewInvestors() bool {
	if x != nil && x.FundClosedForNewInvestors != nil {
		return *x.FundClosedForNewInvestors
	}
	return false
}

func (x *ContractDetails) GetFundClosedForNewMoney() bool {
	if x != nil && x.FundClosedForNewMoney != nil {
		return *x.FundClosedForNewMoney
	}
	return false
}

func (x *ContractDetails) GetFundNotifyAmount() string {
	if x != nil && x.FundNotifyAmount != nil {
		return *x.FundNotifyAmount
	}
	return ""
}

func (x *ContractDetails) GetFundMinimumInitialPurchase() string {
	if x != nil && x.FundMinimumInitialPurchase != nil {
		return *x.FundMinimumInitialPurchase
	}
	return ""
}

func (x *ContractDetails) GetFundMinimumSubsequentPurchase() string {
	if x != nil && x.FundMinimumSubsequentPurchase != nil {
		return *x.FundMinimumSubsequentPurchase
	}
	return ""
}

func (x *ContractDetails) GetFundBlueSkyStates() string {
	if x != nil && x.FundBlueSkyStates != nil {
		return *x.FundBlueSkyStates
	}
	return ""
}

func (x *ContractDetails) GetFundBlueSkyTerritories() string {
	if x != nil && x.FundBlueSkyTerritories != nil {
		return *x.FundBlueSkyTerritories
	}
	return ""
}

func (x *ContractDetails) GetFundDistributionPolicyIndicator() string {
	if x != nil && x.FundDistributionPolicyIndicator != nil {
		return *x.FundDistributionPolicyIndicator
	}
	return ""
}

func (x *ContractDetails) GetFundAssetType() string {
	if x != nil && x.FundAssetType != nil {
		return *x.FundAssetType
	}
	return ""
}

func (x *ContractDetails) GetCusip() string {
	if x != nil && x.Cusip != nil {
		return *x.Cusip
	}
	return ""
}

func (x *ContractDetails) GetIssueDate() string {
	if x != nil && x.IssueDate != nil {
		return *x.IssueDate
	}
	return ""
}

func (x *ContractDetails) GetRatings() string {
	if x != nil && x.Ratings != nil {
		return *x.Ratings
	}
	return ""
}

func (x *ContractDetails) GetBondType() string {
	if x != nil && x.BondType != nil {
		return *x.BondType
	}
	return ""
}

func (x *ContractDetails) GetCoupon() float64 {
	if x != nil && x.Coupon != nil {
		return *x.Coupon
	}
	return 0
}

func (x *ContractDetails) GetCouponType() string {
	if x != nil && x.CouponType != nil {
		return *x.CouponType
	}
	return ""
}

func (x *ContractDetails) GetConvertible() bool {
	if x != nil && x.Convertible != nil {
		return *x.Convertible
	}
	return false
}

func (x *ContractDetails) GetCallable() bool {
	if x != nil && x.Callable != nil {
		return *x.Callable
	}
	return false
}

func (x *ContractDetails) GetPuttable() bool {
	if x != nil && x.Puttable != nil {
		return *x.Puttable
	}
	return false
}

func (x *ContractDetails) GetDescAppend() string {
	if x != nil && x.DescAppend != nil {
		return *x.DescAppend
	}
	return ""
}

func (x *ContractDetails) GetNextOptionDate() string {
	if x != nil && x.NextOptionDate != nil {
		return *x.NextOptionDate
	}
	return ""
}

func (x *ContractDetails) GetNextOptionType() string {
	if x != nil && x.NextOptionType != nil {
		return *x.NextOptionType
	}
	return ""
}

func (x *ContractDetails) GetNextOptionPartial() bool {
	if x != nil && x.NextOptionPartial != nil {
		return *x.NextOptionPartial
	}
	return false
}

func (x *ContractDetails) GetBondNotes() string {
	if x != nil && x.BondNotes != nil {
		return *x.BondNotes
	}
	return ""
}

func (x *ContractDetails) GetIneligibilityReasonList() []*IneligibilityReason {
	if x != nil {
		return x.IneligibilityReasonList
	}
	return nil
}

var File_ContractDetails_proto protoreflect.FileDescriptor

const file_ContractDetails_proto_rawDesc = "" +
	"\n" +
	"\x15ContractDetails.proto\x12\bprotobuf\x1a\x19IneligibilityReason.proto\"\xa1\x1c\n" +
	"\x0fContractDetails\x12#\n" +
	"\n" +
	"marketName\x18\x01 \x01(\tH\x00R\n" +
	"marketName\x88\x01\x01\x12\x1d\n" +
	"\aminTick\x18\x02 \x01(\tH\x01R\aminTick\x88\x01\x01\x12#\n" +
	"\n" +
	"orderTypes\x18\x03 \x01(\tH\x02R\n" +
	"orderTypes\x88\x01\x01\x12+\n" +
	"\x0evalidExchanges\x18\x04 \x01(\tH\x03R\x0evalidExchanges\x88\x01\x01\x12+\n" +
	"\x0epriceMagnifier\x18\x05 \x01(\x05H\x04R\x0epriceMagnifier\x88\x01\x01\x12#\n" +
	"\n" +
	"underConId\x18\x06 \x01(\x05H\x05R\n" +
	"underConId\x88\x01\x01\x12\x1f\n" +
	"\blongName\x18\a \x01(\tH\x06R\blongName\x88\x01\x01\x12)\n" +
	"\rcontractMonth\x18\b \x01(\tH\aR\rcontractMonth\x88\x01\x01\x12\x1f\n" +
	"\bindustry\x18\t \x01(\tH\bR\bindustry\x88\x01\x01\x12\x1f\n" +
	"\bcategory\x18\n" +
	" \x01(\tH\tR\bcategory\x88\x01\x01\x12%\n" +
	"\vsubcategory\x18\v \x01(\tH\n" +
	"R\vsubcategory\x88\x01\x01\x12#\n" +
	"\n" +
	"timeZoneId\x18\f \x01(\tH\vR\n" +
	"timeZoneId\x88\x01\x01\x12'\n" +
	"\ftradingHours\x18\r \x01(\tH\fR\ftradingHours\x88\x01\x01\x12%\n" +
	"\vliquidHours\x18\x0e \x01(\tH\rR\vliquidHours\x88\x01\x01\x12\x1b\n" +
	"\x06evRule\x18\x0f \x01(\tH\x0eR\x06evRule\x88\x01\x01\x12'\n" +
	"\fevMultiplier\x18\x10 \x01(\x01H\x0fR\fevMultiplier\x88\x01\x01\x12F\n" +
	"\tsecIdList\x18\x11 \x03(\v2(.protobuf.ContractDetails.SecIdListEntryR\tsecIdList\x12\x1f\n" +
	"\baggGroup\x18\x12 \x01(\x05H\x10R\baggGroup\x88\x01\x01\x12%\n" +
	"\vunderSymbol\x18\x13 \x01(\tH\x11R\vunderSymbol\x88\x01\x01\x12'\n" +
	"\funderSecType\x18\x14 \x01(\tH\x12R\funderSecType\x88\x01\x01\x12)\n" +
	"\rmarketRuleIds\x18\x15 \x01(\tH\x13R\rmarketRuleIds\x88\x01\x01\x123\n" +
	"\x12realExpirationDate\x18\x16 \x01(\tH\x14R\x12realExpirationDate\x88\x01\x01\x12!\n" +
	"\tstockType\x18\x17 \x01(\tH\x15R\tstockType\x88\x01\x01\x12\x1d\n" +
	"\aminSize\x18\x18 \x01(\tH\x16R\aminSize\x88\x01\x01\x12)\n" +
	"\rsizeIncrement\x18\x19 \x01(\tH\x17R\rsizeIncrement\x88\x01\x01\x12;\n" +
	"\x16suggestedSizeIncrement\x18\x1a \x01(\tH\x18R\x16suggestedSizeIncrement\x88\x01\x01\x12\x1f\n" +
	"\bfundName\x18\x1b \x01(\tH\x19R\bfundName\x88\x01\x01\x12#\n" +
	"\n" +
	"fundFamily\x18\x1c \x01(\tH\x1aR\n" +
	"fundFamily\x88\x01\x01\x12\x1f\n" +
	"\bfundType\x18\x1d \x01(\tH\x1bR\bfundType\x88\x01\x01\x12)\n" +
	"\rfundFrontLoad\x18\x1e \x01(\tH\x1cR\rfundFrontLoad\x88\x01\x01\x12'\n" +
	"\ffundBackLoad\x18\x1f \x01(\tH\x1dR\ffundBackLoad\x88\x01\x01\x12?\n" +
	"\x18fundBackLoadTimeInterval\x18  \x01(\tH\x1eR\x18fundBackLoadTimeInterval\x88\x01\x01\x121\n" +
	"\x11fundManagementFee\x18! \x01(\tH\x1fR\x11fundManagementFee\x88\x01\x01\x12#\n" +
	"\n" +
	"fundClosed\x18\" \x01(\bH R\n" +
	"fundClosed\x88\x01\x01\x12A\n" +
	"\x19fundClosedForNewInvestors\x18# \x01(\bH!R\x19fundClosedForNewInvestors\x88\x01\x01\x129\n" +
	"\x15fundClosedForNewMoney\x18$ \x01(\bH\"R\x15fundClosedForNewMoney\x88\x01\x01\x12/\n" +
	"\x10fundNotifyAmount\x18% \x01(\tH#R\x10fundNotifyAmount\x88\x01\x01\x12C\n" +
	"\x1afundMinimumInitialPurchase\x18& \x01(\tH$R\x1afundMinimumInitialPurchase\x88\x01\x01\x12I\n" +
	"\x1dfundMinimumSubsequentPurchase\x18' \x01(\tH%R\x1dfundMinimumSubsequentPurchase\x88\x01\x01\x121\n" +
	"\x11fundBlueSkyStates\x18( \x01(\tH&R\x11fundBlueSkyStates\x88\x01\x01\x12;\n" +
	"\x16fundBlueSkyTerritories\x18) \x01(\tH'R\x16fundBlueSkyTerritories\x88\x01\x01\x12M\n" +
	"\x1ffundDistributionPolicyIndicator\x18* \x01(\tH(R\x1ffundDistributionPolicyIndicator\x88\x01\x01\x12)\n" +
	"\rfundAssetType\x18+ \x01(\tH)R\rfundAssetType\x88\x01\x01\x12\x19\n" +
	"\x05cusip\x18, \x01(\tH*R\x05cusip\x88\x01\x01\x12!\n" +
	"\tissueDate\x18- \x01(\tH+R\tissueDate\x88\x01\x01\x12\x1d\n" +
	"\aratings\x18. \x01(\tH,R\aratings\x88\x01\x01\x12\x1f\n" +
	"\bbondType\x18/ \x01(\tH-R\bbondType\x88\x01\x01\x12\x1b\n" +
	"\x06coupon\x180 \x01(\x01H.R\x06coupon\x88\x01\x01\x12#\n" +
	"\n" +
	"couponType\x181 \x01(\tH/R\n" +
	"couponType\x88\x01\x01\x12%\n" +
	"\vconvertible\x182 \x01(\bH0R\vconvertible\x88\x01\x01\x12\x1f\n" +
	"\bcallable\x183 \x01(\bH1R\bcallable\x88\x01\x01\x12\x1f\n" +
	"\bputtable\x184 \x01(\bH2R\bputtable\x88\x01\x01\x12#\n" +
	"\n" +
	"descAppend\x185 \x01(\tH3R\n" +
	"descAppend\x88\x01\x01\x12+\n" +
	"\x0enextOptionDate\x186 \x01(\tH4R\x0enextOptionDate\x88\x01\x01\x12+\n" +
	"\x0enextOptionType\x187 \x01(\tH5R\x0enextOptionType\x88\x01\x01\x121\n" +
	"\x11nextOptionPartial\x188 \x01(\bH6R\x11nextOptionPartial\x88\x01\x01\x12!\n" +
	"\tbondNotes\x189 \x01(\tH7R\tbondNotes\x88\x01\x01\x12W\n" +
	"\x17ineligibilityReasonList\x18: \x03(\v2\x1d.protobuf.IneligibilityReasonR\x17ineligibilityReasonList\x1a<\n" +
	"\x0eSecIdListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\r\n" +
	"\v_marketNameB\n" +
	"\n" +
	"\b_minTickB\r\n" +
	"\v_orderTypesB\x11\n" +
	"\x0f_validExchangesB\x11\n" +
	"\x0f_priceMagnifierB\r\n" +
	"\v_underConIdB\v\n" +
	"\t_longNameB\x10\n" +
	"\x0e_contractMonthB\v\n" +
	"\t_industryB\v\n" +
	"\t_categoryB\x0e\n" +
	"\f_subcategoryB\r\n" +
	"\v_timeZoneIdB\x0f\n" +
	"\r_tradingHoursB\x0e\n" +
	"\f_liquidHoursB\t\n" +
	"\a_evRuleB\x0f\n" +
	"\r_evMultiplierB\v\n" +
	"\t_aggGroupB\x0e\n" +
	"\f_underSymbolB\x0f\n" +
	"\r_underSecTypeB\x10\n" +
	"\x0e_marketRuleIdsB\x15\n" +
	"\x13_realExpirationDateB\f\n" +
	"\n" +
	"_stockTypeB\n" +
	"\n" +
	"\b_minSizeB\x10\n" +
	"\x0e_sizeIncrementB\x19\n" +
	"\x17_suggestedSizeIncrementB\v\n" +
	"\t_fundNameB\r\n" +
	"\v_fundFamilyB\v\n" +
	"\t_fundTypeB\x10\n" +
	"\x0e_fundFrontLoadB\x0f\n" +
	"\r_fundBackLoadB\x1b\n" +
	"\x19_fundBackLoadTimeIntervalB\x14\n" +
	"\x12_fundManagementFeeB\r\n" +
	"\v_fundClosedB\x1c\n" +
	"\x1a_fundClosedForNewInvestorsB\x18\n" +
	"\x16_fundClosedForNewMoneyB\x13\n" +
	"\x11_fundNotifyAmountB\x1d\n" +
	"\x1b_fundMinimumInitialPurchaseB \n" +
	"\x1e_fundMinimumSubsequentPurchaseB\x14\n" +
	"\x12_fundBlueSkyStatesB\x19\n" +
	"\x17_fundBlueSkyTerritoriesB\"\n" +
	" _fundDistributionPolicyIndicatorB\x10\n" +
	"\x0e_fundAssetTypeB\b\n" +
	"\x06_cusipB\f\n" +
	"\n" +
	"_issueDateB\n" +
	"\n" +
	"\b_ratingsB\v\n" +
	"\t_bondTypeB\t\n" +
	"\a_couponB\r\n" +
	"\v_couponTypeB\x0e\n" +
	"\f_convertibleB\v\n" +
	"\t_callableB\v\n" +
	"\t_puttableB\r\n" +
	"\v_descAppendB\x11\n" +
	"\x0f_nextOptionDateB\x11\n" +
	"\x0f_nextOptionTypeB\x14\n" +
	"\x12_nextOptionPartialB\f\n" +
	"\n" +
	"_bondNotesB\fZ\n" +
	".;protobufb\x06proto3"

var (
	file_ContractDetails_proto_rawDescOnce sync.Once
	file_ContractDetails_proto_rawDescData []byte
)

func file_ContractDetails_proto_rawDescGZIP() []byte {
	file_ContractDetails_proto_rawDescOnce.Do(func() {
		file_ContractDetails_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ContractDetails_proto_rawDesc), len(file_ContractDetails_proto_rawDesc)))
	})
	return file_ContractDetails_proto_rawDescData
}

var file_ContractDetails_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ContractDetails_proto_goTypes = []any{
	(*ContractDetails)(nil),     // 0: protobuf.ContractDetails
	nil,                         // 1: protobuf.ContractDetails.SecIdListEntry
	(*IneligibilityReason)(nil), // 2: protobuf.IneligibilityReason
}
var file_ContractDetails_proto_depIdxs = []int32{
	1, // 0: protobuf.ContractDetails.secIdList:type_name -> protobuf.ContractDetails.SecIdListEntry
	2, // 1: protobuf.ContractDetails.ineligibilityReasonList:type_name -> protobuf.IneligibilityReason
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ContractDetails_proto_init() }
func file_ContractDetails_proto_init() {
	if File_ContractDetails_proto != nil {
		return
	}
	file_IneligibilityReason_proto_init()
	file_ContractDetails_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ContractDetails_proto_rawDesc), len(file_ContractDetails_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ContractDetails_proto_goTypes,
		DependencyIndexes: file_ContractDetails_proto_depIdxs,
		MessageInfos:      file_ContractDetails_proto_msgTypes,
	}.Build()
	File_ContractDetails_proto = out.File
	file_ContractDetails_proto_goTypes = nil
	file_ContractDetails_proto_depIdxs = nil
}
